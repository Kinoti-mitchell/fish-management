import{w as a,s as i,o as n}from"./main-DlkDVF11.js";class p{async getSizeClassThresholds(){try{const{data:t,error:r}=await a(async()=>await i.from("size_class_thresholds").select("*").eq("is_active",!0).order("class_number"));return r?(console.warn("Permission denied for size_class_thresholds, returning empty array"),[]):t||[]}catch(t){return console.warn("Error fetching size class thresholds:",t),[]}}async updateSizeClassThresholds(t){try{const r=t.map(o=>({...o,updated_at:new Date().toISOString()})),{data:e,error:s}=await a(async()=>await i.from("size_class_thresholds").upsert(r).select());if(s)throw s;return e||[]}catch(r){throw new Error(n(r,"updating size class thresholds"))}}async getSizeClassForWeight(t){try{const{data:r,error:e}=await a(async()=>await i.rpc("get_size_class_for_weight",{weight_grams:t}));if(e)throw e;return r}catch(r){throw new Error(n(r,"determining size class for weight"))}}async createSortingBatch(t){try{const{data:r,error:e}=await a(async()=>await i.rpc("create_sorting_batch",{p_processing_record_id:t.processing_record_id,p_batch_number:t.batch_number,p_sorted_by:null,p_storage_location_id:t.storage_location_id||null}));if(e)throw e;const{data:s,error:o}=await a(async()=>await i.from("sorting_batches").select(`
            *,
            processing_record:processing_records(
              id,
              processing_date,
              post_processing_weight,
              ready_for_dispatch_count,
              processing_code
            )
          `).eq("id",r).single());if(o)throw o;return s}catch(r){throw new Error(n(r,"creating sorting batch"))}}async getSortingBatches(t){try{let r=i.from("sorting_batches").select(`
          *,
          processing_record:processing_records(
            id,
            processing_date,
            post_processing_weight,
            ready_for_dispatch_count,
            processing_code,
            fish_type,
            grading_results,
            final_value,
            processing_yield,
            processing_waste,
            size_distribution,
            total_pieces,
            warehouse_entry:warehouse_entries(
              id,
              farmer_id,
              farmer:farmers(
                id,
                name,
                phone,
                location,
                rating
              )
            )
          )
        `).order("created_at",{ascending:!1});t?.status&&(r=r.eq("status",t.status)),t?.processing_record_id&&(r=r.eq("processing_record_id",t.processing_record_id)),t?.date_from&&(r=r.gte("sorting_date",t.date_from)),t?.date_to&&(r=r.lte("sorting_date",t.date_to));const e=t?.limit||50;r=r.limit(e);const{data:s,error:o}=await a(async()=>r);if(o)throw o;return s||[]}catch(r){throw new Error(n(r,"fetching sorting batches"))}}async getSortingBatch(t){try{const{data:r,error:e}=await a(async()=>await i.from("sorting_batches").select(`
            *,
            processing_record:processing_records(
              id,
              processing_date,
              post_processing_weight,
              ready_for_dispatch_count,
              processing_code,
              fish_type,
              grading_results,
              final_value,
              processing_yield,
              processing_waste,
              size_distribution,
              total_pieces,
              warehouse_entry:warehouse_entries(
                id,
                farmer_id,
                farmer:farmers(
                  id,
                  name,
                  phone,
                  location,
                  rating
                )
              )
            )
          `).eq("id",t).single());if(e)throw e;const{data:s,error:o}=await a(async()=>await i.from("sorting_results").select("*").eq("sorting_batch_id",t).order("size_class"));if(o)throw o;return{...r,results:s||[]}}catch(r){throw new Error(n(r,"fetching sorting batch"))}}async addSortedFishItem(t){try{const{data:r,error:e}=await a(async()=>await i.rpc("add_sorted_fish_item",{p_sorting_batch_id:t.sorting_batch_id,p_weight_grams:t.weight_grams,p_length_cm:t.length_cm,p_grade:t.grade,p_quality_notes:t.quality_notes,p_storage_location_id:t.storage_location_id||null}));if(e)throw e;const{data:s,error:o}=await a(async()=>await i.from("sorted_fish_items").select("*").eq("id",r).single());if(o)throw o;return s}catch(r){throw new Error(n(r,"adding sorted fish item"))}}async updateSortingBatch(t,r){try{const{data:e,error:s}=await a(async()=>await i.from("sorting_batches").update({...r,updated_at:new Date().toISOString()}).eq("id",t).select(`
            *,
            processing_record:processing_records(
              id,
              processing_date,
              post_processing_weight,
              ready_for_dispatch_count,
              processing_code
            )
          `).single());if(s)throw s;return e}catch(e){throw new Error(n(e,"updating sorting batch"))}}async completeSortingBatch(t){try{const{data:r,error:e}=await a(async()=>await i.rpc("complete_sorting_batch",{p_sorting_batch_id:t}));if(e)throw e;return r}catch(r){throw new Error(n(r,"completing sorting batch"))}}async getSortingResultsForInventory(t){try{const{data:r,error:e}=await a(async()=>await i.rpc("get_sorting_results_for_inventory",{p_sorting_batch_id:t}));if(e)throw e;return r||[]}catch(r){throw new Error(n(r,"fetching sorting results for inventory"))}}async getSortingSummary(t){try{const r=await this.getSortingBatch(t),e={},s={};let o=0,_=0;r.results.forEach(c=>{e[c.size_class]={pieces:c.total_pieces,weight:c.total_weight_grams,average_weight:c.average_weight_grams},o+=c.total_pieces,_+=c.total_weight_grams,Object.entries(c.grade_distribution).forEach(([g,h])=>{s[g]=(s[g]||0)+h})});const d=r.total_pieces>0?Math.round(o/r.total_pieces*100):0;return{batch_id:r.id,batch_number:r.batch_number,total_items:o,total_weight:_,size_class_distribution:e,grade_distribution:s,completion_percentage:d}}catch(r){throw new Error(n(r,"generating sorting summary"))}}async validateProcessingRecordForSorting(t){try{const{data:r,error:e}=await a(async()=>await i.from("processing_records").select("*").eq("id",t).single());if(e)throw e;if(!r)return{canSort:!1,reason:"Processing record not found"};const{data:s,error:o}=await a(async()=>await i.from("sorting_batches").select("id, status").eq("processing_record_id",t).eq("status","completed"));if(o)throw o;return(s&&s.length>0?s[0]:null)?{canSort:!1,reason:"Processing record already sorted"}:!r.post_processing_weight||r.post_processing_weight<=0?{canSort:!1,reason:"Invalid post-processing weight"}:!r.ready_for_dispatch_count||r.ready_for_dispatch_count<=0?{canSort:!1,reason:"No fish ready for dispatch"}:{canSort:!0,processingRecord:r}}catch(r){throw new Error(n(r,"validating processing record for sorting"))}}async getProcessingRecordsReadyForSorting(){try{const{data:t,error:r}=await a(async()=>await i.from("processing_records").select(`
            *,
            warehouse_entry:warehouse_entries(
              id,
              entry_date,
              total_weight,
              farmer_id,
              entry_code,
              farmer:farmers(
                id,
                name,
                phone,
                location,
                rating
              )
            ),
            sorting_batches!left(
              id,
              status
            )
          `).gt("post_processing_weight",0).order("processing_date",{ascending:!1}));if(r)throw r;return(t||[]).filter(o=>!o.sorting_batches?.some(d=>d.status==="completed"))}catch(t){throw new Error(n(t,"fetching processing records ready for sorting"))}}}const u=new p;export{u as s};
