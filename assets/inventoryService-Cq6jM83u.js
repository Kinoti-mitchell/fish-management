var M=Object.defineProperty,$=Object.defineProperties;var N=Object.getOwnPropertyDescriptors;var A=Object.getOwnPropertySymbols;var R=Object.prototype.hasOwnProperty,W=Object.prototype.propertyIsEnumerable;var C=(w,t,e)=>t in w?M(w,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):w[t]=e,q=(w,t)=>{for(var e in t||(t={}))R.call(t,e)&&C(w,e,t[e]);if(A)for(var e of A(t))W.call(t,e)&&C(w,e,t[e]);return w},O=(w,t)=>$(w,N(t));var c=(w,t,e)=>new Promise((a,r)=>{var s=_=>{try{n(e.next(_))}catch(l){r(l)}},i=_=>{try{n(e.throw(_))}catch(l){r(l)}},n=_=>_.done?a(_.value):Promise.resolve(_.value).then(s,i);n((e=e.apply(w,t)).next())});import{w as d,s as u,o as f}from"./index-BsUmuyG4.js";class x{getInventoryByStorage(){return c(this,null,function*(){try{return console.log("🔍 Getting inventory by storage with capacity method (working approach)..."),yield this.getInventoryByStorageWithCapacity()}catch(t){console.warn("⚠️ Error in capacity method, falling back to legacy method:",t);try{return yield this.getInventoryByStorageFallback()}catch(e){return console.warn("❌ Error in fallback method:",e),[]}}})}getInventoryByStorageWithFIFO(){return c(this,null,function*(){throw console.warn("⚠️ FIFO database function is not available, this method is disabled"),new Error("FIFO_FUNCTION_NOT_AVAILABLE")})}getInventoryByStorageWithCapacity(){return c(this,null,function*(){try{console.log("🔍 Getting all storage locations with capacity data...");const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").order("name")}));if(e)throw e;console.log("📊 Storage locations from database:",t);const{data:a,error:r}=yield d(()=>c(this,null,function*(){return yield u.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).gt("total_weight_grams",0).order("created_at",{ascending:!1})}));if(r)throw r;const s=(a||[]).filter(o=>o.sorting_batch&&o.sorting_batch.status==="completed");console.log("📦 Filtered sorting results (completed only):",s.length,"out of",(a==null?void 0:a.length)||0);const i=new Map;console.log("🗺️ Creating storage map from locations:",t),t==null||t.forEach(o=>{console.log("📍 Adding storage location to map:",o.id,o.name),i.set(o.id,o)}),console.log("🗺️ Storage map created with",i.size,"locations");const n={};t==null||t.forEach(o=>{n[o.id]={storage_location_id:o.id,storage_location_name:o.name,storage_location_type:o.location_type,status:o.status||"active",capacity_kg:o.capacity_kg||0,current_usage_kg:0,available_capacity_kg:o.capacity_kg||0,utilization_percent:0,sizes:{}}}),console.log("🔄 Processing sorting results:",s.length,"results"),s.forEach(o=>{var v,k,m,z,S,E,I,F,T,B;const g=o.storage_location_id,h=i.get(g);if(console.log("🔍 Processing result for storage:",g,"found storage:",!!h),!h){console.warn("⚠️ No storage found for ID:",g,"available storage IDs:",Array.from(i.keys()));return}if(!n[g]){console.warn("⚠️ No storage aggregation found for ID:",g);return}const y=o.size_class,p=o.total_pieces||0,b=(o.total_weight_grams||0)/1e3;p>0&&(n[g].sizes[y]||(n[g].sizes[y]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),n[g].sizes[y].total_quantity+=p,n[g].sizes[y].total_weight_kg+=b,n[g].sizes[y].batch_count+=1,n[g].sizes[y].contributing_batches.push({batch_id:o.sorting_batch_id,batch_number:((v=o.sorting_batch)==null?void 0:v.batch_number)||`BATCH-${(k=o.sorting_batch_id)==null?void 0:k.slice(-8).toUpperCase()}`,quantity:p,weight_kg:b,storage_location_name:h.name,farmer_name:((E=(S=(z=(m=o.sorting_batch)==null?void 0:m.processing_record)==null?void 0:z.warehouse_entry)==null?void 0:S.farmers)==null?void 0:E.name)||"Unknown",processing_date:((F=(I=o.sorting_batch)==null?void 0:I.processing_record)==null?void 0:F.processing_date)||"Unknown",added_date:((T=o.sorting_batch)==null?void 0:T.created_at)||new Date().toISOString(),created_at:((B=o.sorting_batch)==null?void 0:B.created_at)||new Date().toISOString(),is_transfer:!!o.transfer_id,transfer_id:o.transfer_id,transfer_source_storage_id:o.transfer_source_storage_id,transfer_source_storage_name:o.transfer_source_storage_name}))}),Object.values(n).forEach(o=>{let g=0;Object.values(o.sizes).forEach(h=>{g+=h.total_weight_kg}),o.current_usage_kg=g,o.available_capacity_kg=Math.max(0,o.capacity_kg-g),o.utilization_percent=o.capacity_kg>0?Math.round(g/o.capacity_kg*100*100)/100:0});const _=[];Object.values(n).forEach(o=>{Object.keys(o.sizes).length===0?_.push({storage_location_id:o.storage_location_id,storage_location_name:o.storage_location_name,storage_location_type:o.storage_location_type,storage_status:o.status||"active",capacity_kg:o.capacity_kg,current_usage_kg:o.current_usage_kg,available_capacity_kg:o.available_capacity_kg,utilization_percent:o.utilization_percent,size:null,total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}):Object.entries(o.sizes).forEach(([g,h])=>{_.push({storage_location_id:o.storage_location_id,storage_location_name:o.storage_location_name,storage_location_type:o.storage_location_type,storage_status:o.status||"active",capacity_kg:o.capacity_kg,current_usage_kg:o.current_usage_kg,available_capacity_kg:o.available_capacity_kg,utilization_percent:o.utilization_percent,size:parseInt(g),total_quantity:h.total_quantity,total_weight_kg:h.total_weight_kg,batch_count:h.batch_count,contributing_batches:h.contributing_batches})})}),console.log("📦 Final inventory result with capacity:",_),console.log("📊 Storage aggregation with capacity:",n);const l=_.filter(o=>o.size===9);return console.log("🔍 Size 9 in final inventory result:",l),console.log("🔍 Size 9 by storage:",l.map(o=>({storage:o.storage_location_name,weight:o.total_weight_kg,hasBatches:o.contributing_batches&&o.contributing_batches.length>0}))),_.sort((o,g)=>o.storage_location_name!==g.storage_location_name?o.storage_location_name.localeCompare(g.storage_location_name):o.size===null&&g.size!==null?-1:o.size!==null&&g.size===null?1:o.size===null&&g.size===null?0:o.size-g.size)}catch(t){throw new Error(f(t,"fetching inventory with capacity tracking"))}})}getInventoryByStorageFallback(){return c(this,null,function*(){try{console.log("🔍 Getting storage locations directly from storage_locations table...");const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("storage_locations").select("id, name, status").order("name")}));if(console.log("📊 Storage locations from table:",t),console.log("❌ Storage error:",e),e){console.warn("Could not fetch storage locations table:",e),console.log("🔄 Using known storage locations...");const r=new Map;return r.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),r.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),r.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),r.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),r.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),r.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(r)}const a=new Map;return t==null||t.forEach(r=>{a.set(r.id,r.name)}),console.log("✅ Using storage locations from table:",a),this.getInventoryWithStorageMap(a)}catch(t){console.error("Error in getInventoryByStorageFallback:",t);const e=new Map;return e.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),e.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),e.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),e.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),e.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),e.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(e)}})}getInventorySummary(){return c(this,null,function*(){try{const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("inventory").select("*").order("size",{ascending:!0})}));if(e)throw e;return(t||[]).map(a=>({size:a.size,quantity:a.quantity,total_weight_kg:this.getEstimatedWeightPerFish(a.size)*a.quantity}))}catch(t){throw new Error(f(t,"fetching inventory summary"))}})}getEstimatedWeightPerFish(t){return{0:.2,1:.3,2:.4,3:.5,4:.6,5:.7,6:.8,7:.9,8:1,9:1.1,10:1.2}[t]||.5}getOldestBatchForRemoval(){return c(this,null,function*(){try{console.log("🔍 Getting oldest batches available for ordering (FIFO)...");const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_batches_available_for_order")}));if(e)return console.warn("⚠️ Error fetching batches available for order:",e),yield this.getOldestBatchFallback();if(!t||t.length===0)return console.log("📦 No batches available for ordering"),[];const a=t.map(r=>({batch_id:r.batch_id,batch_number:r.batch_number,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_kg,storage_location_name:r.storage_location_name,created_at:r.created_at,processing_date:r.processing_date,farmer_name:r.farmer_name,days_in_storage:r.days_in_storage,batch_status:"completed",available_for_order:!0,priority_score:r.priority_score}));return console.log("📦 FIFO batches available for ordering:",a.length),a.length>0&&console.log("📦 First available batch:",a[0]),a.slice(0,10)}catch(t){return console.error("❌ Error in getOldestBatchForRemoval:",t),[]}})}getOldestBatchFallback(){return c(this,null,function*(){try{console.log("🔍 Using fixed fallback method for oldest batches...");const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_oldest_batches_fixed")}));if(e)return console.warn("⚠️ Error in fixed fallback query:",e),[];if(!t||t.length===0)return console.log("📦 No results from fixed fallback query"),[];const a=t.map(r=>({batch_id:r.batch_id,batch_number:r.batch_number,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_kg,storage_location_name:r.storage_location_name,created_at:r.created_at,processing_date:r.processing_date,farmer_name:r.farmer_name,days_in_storage:r.days_in_storage,batch_status:"completed"}));return console.log("📦 Fixed fallback method found:",a.length,"batches"),a.slice(0,10)}catch(t){return console.error("❌ Error in fixed fallback method:",t),[]}})}getBatchDetails(t){return c(this,null,function*(){try{console.log("🔍 Getting batch details for:",t);const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_batch_details_fixed",{p_batch_id:t})}));if(a)return console.warn("⚠️ Error fetching batch details:",a),null;if(!e||e.length===0)return console.warn("⚠️ No batch details found for:",t),null;const r=e[0],s={batch:{id:r.batch_id,batch_number:r.batch_number,status:r.status,created_at:r.created_at,processing_record:{processing_date:r.processing_date,warehouse_entry:{farmers:{name:r.farmer_name,phone:r.farmer_phone,location:r.farmer_location}}}},sizes:r.sizes||[]};return console.log("📦 Batch details processed:",s),s}catch(e){return console.error("❌ Error in getBatchDetails:",e),null}})}getSizeDemandStatistics(){return c(this,null,function*(){try{console.log("🔍 Getting size demand statistics from outlet orders...");const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("outlet_orders").select(`
            id,
            requested_sizes,
            requested_quantity,
            requested_grade,
            order_date,
            status,
            outlet:outlets(
              id,
              name,
              location
            )
          `).not("requested_sizes","is",null).order("order_date",{ascending:!1})}));if(e)return console.warn("⚠️ Error fetching outlet orders data:",e),[];console.log("📦 Raw outlet orders data:",t);const a=(t||[]).filter(i=>["confirmed","processing","dispatched","delivered"].includes(i.status)&&i.requested_quantity>0);console.log("📦 Valid outlet orders:",a);const r=new Map;a.forEach(i=>{i.requested_sizes&&Array.isArray(i.requested_sizes)&&i.requested_sizes.forEach(n=>{var o;r.has(n)||r.set(n,{size_class:n,total_orders:0,total_weight_kg_requested:0,outlet_count:new Set,first_order_date:null,last_order_date:null,grade_preferences:new Map});const _=r.get(n);if(_.total_orders+=1,_.total_weight_kg_requested+=i.requested_quantity||0,_.outlet_count.add((o=i.outlet)==null?void 0:o.id),i.requested_grade){const g=_.grade_preferences.get(i.requested_grade)||0;_.grade_preferences.set(i.requested_grade,g+1)}const l=new Date(i.order_date);(!_.first_order_date||l<new Date(_.first_order_date))&&(_.first_order_date=i.order_date),(!_.last_order_date||l>new Date(_.last_order_date))&&(_.last_order_date=i.order_date)})});const s=Array.from(r.values()).map(i=>{var n;return{size_class:i.size_class,total_orders:i.total_orders,total_weight_kg_requested:i.total_weight_kg_requested,unique_outlets:i.outlet_count.size,first_order_date:i.first_order_date,last_order_date:i.last_order_date,days_span:i.first_order_date&&i.last_order_date?Math.ceil((new Date(i.last_order_date).getTime()-new Date(i.first_order_date).getTime())/(1e3*60*60*24)):0,most_requested_grade:((n=Array.from(i.grade_preferences.entries()).sort((_,l)=>l[1]-_[1])[0])==null?void 0:n[0])||"any"}}).filter(i=>i.total_weight_kg_requested>0).sort((i,n)=>n.total_weight_kg_requested-i.total_weight_kg_requested);return console.log("📊 Size demand statistics from outlet orders:",s),s}catch(t){return console.error("❌ Error in getSizeDemandStatistics:",t),[]}})}getInventoryWithStorageMap(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).order("created_at",{ascending:!1})}));if(a)throw a;const r=(e||[]).filter(n=>n.sorting_batch&&n.sorting_batch.status==="completed");console.log("📦 Filtered sorting results (completed only):",r.length,"out of",(e==null?void 0:e.length)||0);const s={};r.forEach(n=>{var y,p,b,v,k,m,z,S,E,I,F,T,B,U;const _=n.storage_location_id||"unknown",l=t.get(_)||"Unknown Storage",o=n.size_class,g=n.total_pieces||0,h=(n.total_weight_grams||0)/1e3;if(g>0){s[_]||(s[_]={storage_location_id:_,storage_location_name:l,sizes:{}}),s[_].sizes[o]||(s[_].sizes[o]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),s[_].sizes[o].total_quantity+=g,s[_].sizes[o].total_weight_kg+=h,s[_].sizes[o].batch_count+=1;const P=!!n.transfer_id&&n.transfer_source_storage_name;s[_].sizes[o].contributing_batches.push(q({batch_id:n.sorting_batch_id,batch_number:((y=n.sorting_batch)==null?void 0:y.batch_number)||`BATCH-${(p=n.sorting_batch_id)==null?void 0:p.slice(-8).toUpperCase()}`,quantity:g,weight_kg:h,storage_location_name:l,farmer_name:P?`${((m=(k=(v=(b=n.sorting_batch)==null?void 0:b.processing_record)==null?void 0:v.warehouse_entry)==null?void 0:k.farmers)==null?void 0:m.name)||"Unknown"} (Transferred from ${n.transfer_source_storage_name})`:((I=(E=(S=(z=n.sorting_batch)==null?void 0:z.processing_record)==null?void 0:S.warehouse_entry)==null?void 0:E.farmers)==null?void 0:I.name)||"Unknown",processing_date:((T=(F=n.sorting_batch)==null?void 0:F.processing_record)==null?void 0:T.processing_date)||"Unknown",added_date:((B=n.sorting_batch)==null?void 0:B.created_at)||new Date().toISOString(),created_at:((U=n.sorting_batch)==null?void 0:U.created_at)||new Date().toISOString()},P&&{is_transfer:!0,transfer_id:n.transfer_id,transfer_source_storage_id:n.transfer_source_storage_id,transfer_source_storage_name:n.transfer_source_storage_name}))}});const i=[];return Object.values(s).forEach(n=>{Object.entries(n.sizes).forEach(([_,l])=>{i.push({storage_location_id:n.storage_location_id,storage_location_name:n.storage_location_name,size:parseInt(_),total_quantity:l.total_quantity,total_weight_kg:l.total_weight_kg,batch_count:l.batch_count,contributing_batches:l.contributing_batches})})}),console.log("📦 Final inventory result:",i),console.log("📊 Storage aggregation:",s),i.sort((n,_)=>n.storage_location_name!==_.storage_location_name?n.storage_location_name.localeCompare(_.storage_location_name):n.size-_.size)}catch(e){throw new Error(f(e,"fetching inventory with storage map"))}})}getInventoryFromSortingBatchesFallback(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.from("sorting_batches").select(`
            id,
            batch_number,
            size_distribution,
            created_at,
            storage_location_id,
            processing_record:processing_records(
              id,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").not("size_distribution","is",null).order("created_at",{ascending:!1})}));if(a)throw a;const r={};return e==null||e.forEach(s=>{s.size_distribution&&typeof s.size_distribution=="object"&&Object.entries(s.size_distribution).forEach(([i,n])=>{var o,g,h,y,p,b,v;const _=parseInt(i),l=parseInt(n)||0;if(!isNaN(_)&&l>0){const k=this.getEstimatedWeightPerFish(_),m=l*k;r[_]||(r[_]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[],storage_locations:{}}),r[_].total_quantity+=l,r[_].total_weight_kg+=m,r[_].batch_count+=1,r[_].contributing_batches.push({batch_id:s.id,batch_number:s.batch_number||`BATCH-${(o=s.id)==null?void 0:o.slice(-8).toUpperCase()}`,quantity:l,weight_kg:m,storage_location_id:s.storage_location_id,storage_location_name:t.get(s.storage_location_id)||"Unknown Storage",farmer_name:((y=(h=(g=s.processing_record)==null?void 0:g.warehouse_entry)==null?void 0:h.farmers)==null?void 0:y.name)||"Unknown",processing_date:((p=s.processing_record)==null?void 0:p.processing_date)||"Unknown",added_date:s.created_at,created_at:s.created_at}),s.storage_location_id&&(r[_].storage_locations[s.storage_location_id]={storage_location_name:t.get(s.storage_location_id)||"Unknown Storage",quantity:(((b=r[_].storage_locations[s.storage_location_id])==null?void 0:b.quantity)||0)+l,weight_kg:(((v=r[_].storage_locations[s.storage_location_id])==null?void 0:v.weight_kg)||0)+m})}})}),Object.entries(r).map(([s,i])=>({size:parseInt(s),quantity:i.total_quantity,total_weight_kg:i.total_weight_kg,batch_count:i.batch_count,storage_locations:i.storage_locations,contributing_batches:i.contributing_batches})).sort((s,i)=>s.size-i.size)}catch(e){throw new Error(f(e,"fetching inventory from sorting batches fallback"))}})}getBatchesForSize(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_batches_for_size",{p_size:t})}));if(a)throw a;return e||[]}catch(e){throw new Error(f(e,"fetching batches for size"))}})}getStorageCapacityStatus(){return c(this,null,function*(){try{const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_storage_capacity_status")}));if(e)throw e;return t||[]}catch(t){throw new Error(f(t,"fetching storage capacity status"))}})}getAvailableStorageLocationsForSorting(t=0){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_available_storage_locations_for_sorting",{p_required_weight_kg:t})}));if(a)throw a;return e||[]}catch(e){throw new Error(f(e,"fetching available storage locations"))}})}validateStorageLocationForSorting(t,e=0){return c(this,null,function*(){try{const{data:a,error:r}=yield d(()=>c(this,null,function*(){return yield u.rpc("validate_storage_location_for_sorting",{p_storage_location_id:t,p_estimated_weight_kg:e})}));if(r)throw r;return(a==null?void 0:a[0])||{is_valid:!1,message:"Validation failed",storage_location_name:"",available_capacity_kg:0,utilization_percent:0}}catch(a){throw new Error(f(a,"validating storage location"))}})}getInventoryItems(){return c(this,null,function*(){try{const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("inventory").select("*").order("size",{ascending:!0})}));if(e)throw e;return t||[]}catch(t){throw new Error(f(t,"fetching inventory items"))}})}getInventoryEntries(t=100){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.from("inventory_entries").select("*").order("created_at",{ascending:!1}).limit(t)}));if(a)throw a;return e||[]}catch(e){throw new Error(f(e,"fetching inventory entries"))}})}addStockFromSorting(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.rpc("add_stock_from_sorting",{p_sorting_batch_id:t})}));if(a)throw a;return e||[]}catch(e){throw new Error(f(e,"adding stock from sorting batch"))}})}getSortingBatchesForInventory(){return c(this,null,function*(){try{const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("sorting_batches").select(`
            *,
            processing_record:processing_records(
              id,
              post_processing_weight,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                entry_date,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").order("created_at",{ascending:!1})}));if(e)throw e;return yield Promise.all((t||[]).map(r=>c(this,null,function*(){const{data:s,error:i}=yield d(()=>c(this,null,function*(){return yield u.from("sorting_results").select("*").eq("sorting_batch_id",r.id).order("size_class")}));return i?(console.warn(`Error fetching results for batch ${r.id}:`,i),O(q({},r),{results:[]})):O(q({},r),{results:s||[]})})))}catch(t){throw new Error(f(t,"fetching sorting batches for inventory"))}})}validateSortingBatchForInventory(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.rpc("validate_sorting_batch_for_inventory",{p_sorting_batch_id:t})}));if(a)throw a;return e||{canAdd:!1,reason:"Unknown error"}}catch(e){throw new Error(f(e,"validating sorting batch for inventory"))}})}getInventoryBySize(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.from("inventory").select("*").eq("size",t).single()}));if(a&&a.code!=="PGRST116")throw a;return e||null}catch(e){throw new Error(f(e,`fetching inventory for size ${t}`))}})}getInventoryStats(){return c(this,null,function*(){try{const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.rpc("get_inventory_statistics")}));if(e)throw e;return t||{total_quantity:0,total_weight:0,size_distribution:{},last_updated:new Date().toISOString()}}catch(t){throw new Error(f(t,"fetching inventory statistics"))}})}createInventoryAdjustment(t,e,a){return c(this,null,function*(){try{const{data:r,error:s}=yield d(()=>c(this,null,function*(){return yield u.from("inventory_entries").insert({size:t,quantity_change:e,entry_type:"adjustment",notes:a}).select().single()}));if(s)throw s;return r}catch(r){throw new Error(f(r,"creating inventory adjustment"))}})}updateInventory(t,e){return c(this,null,function*(){try{const{data:a,error:r}=yield d(()=>c(this,null,function*(){return yield u.from("inventory").update({quantity:e,updated_at:new Date().toISOString()}).eq("id",t).select().single()}));if(r)throw r;return a}catch(a){throw new Error(f(a,"updating inventory item"))}})}processFIFOOrderFulfillment(t,e,a,r){return c(this,null,function*(){var s;try{const{data:i,error:n}=yield d(()=>c(this,null,function*(){return yield u.rpc("process_fifo_order_fulfillment",{p_order_id:t,p_size:e,p_required_quantity:a,p_required_weight_kg:r})}));if(n){if(n.code==="PGRST202"||(s=n.message)!=null&&s.includes("Could not find the function"))return console.warn("⚠️ FIFO order fulfillment function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",allocatedBatches:[],remainingQuantity:a,remainingWeightKg:r};throw n}return(i==null?void 0:i[0])||{success:!1,message:"Unknown error",allocatedBatches:[],remainingQuantity:0,remainingWeightKg:0}}catch(i){throw new Error(f(i,"processing FIFO order fulfillment"))}})}reduceInventoryOnOrderApproval(t,e,a,r){return c(this,null,function*(){var s;try{const{data:i,error:n}=yield d(()=>c(this,null,function*(){return yield u.rpc("reduce_inventory_on_order_approval",{p_order_id:t,p_size:e,p_quantity:a,p_weight_kg:r})}));if(n){if(n.code==="PGRST202"||(s=n.message)!=null&&s.includes("Could not find the function"))return console.warn("⚠️ FIFO inventory reduction function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",reducedBatches:[]};throw n}return(i==null?void 0:i[0])||{success:!1,message:"Unknown error",reducedBatches:[]}}catch(i){throw new Error(f(i,"reducing inventory on order approval"))}})}transferInventoryBetweenStorage(t,e,a,r,s){return c(this,null,function*(){var i;try{const{data:n,error:_}=yield d(()=>c(this,null,function*(){return yield u.rpc("transfer_inventory_between_storage",{p_from_storage_location_id:t,p_to_storage_location_id:e,p_size:a,p_quantity:r,p_notes:s||null})}));if(_){if(_.code==="PGRST202"||(i=_.message)!=null&&i.includes("Could not find the function"))return console.warn("⚠️ Transfer function not found. Please run the database script: db/fix_inventory_storage_integration.sql"),{success:!1,message:"Transfer function not available. Please run the database setup script.",from_remaining:0,to_new_total:0};throw _}return(n==null?void 0:n[0])||{success:!1,message:"Unknown error",from_remaining:0,to_new_total:0}}catch(n){throw new Error(f(n,"transferring inventory between storage locations"))}})}createTransfer(t,e,a,r,s,i){return c(this,null,function*(){try{const{data:n,error:_}=yield d(()=>c(this,null,function*(){return yield u.rpc("create_transfer",{p_from_storage_location_id:t,p_to_storage_location_id:e,p_size:a,p_quantity:r,p_weight_kg:s,p_notes:i||null})}));if(_)throw _;return{success:!0,transferId:n,message:"Transfer created successfully"}}catch(n){throw new Error(f(n,"creating transfer"))}})}createTransferRequest(t,e,a,r,s,i){return c(this,null,function*(){const n=yield this.createTransfer(t,e,a,r,s,i);return{success:n.success,requestId:n.transferId,message:n.message}})}createBatchTransfer(t,e,a,r,s){return c(this,null,function*(){try{const{data:i,error:n}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("id, size_class, quantity, weight_kg, notes").eq("from_storage_location_id",t).eq("to_storage_location_id",e).eq("status","pending")}));if(n)console.warn("Could not check for existing transfers:",n);else if(i&&i.length>0&&a.some(h=>i.some(y=>y.size_class===h.size&&y.quantity===h.quantity&&Math.abs(y.weight_kg-h.weightKg)<.01)))throw new Error("A transfer request for these items already exists. Please check the transfer approvals section.");const _=a.map(g=>({size:Number(g.size),quantity:g.quantity?Number(g.quantity):1,weightKg:Number(g.weightKg)}));console.log("🔍 [InventoryService] Creating batch transfer with data:",{fromStorageLocationId:t,toStorageLocationId:e,sizeData:_,notes:r});const{data:l,error:o}=yield d(()=>c(this,null,function*(){return yield u.rpc("create_batch_transfer",{p_from_storage_location_id:t,p_to_storage_location_id:e,p_size_data:_,p_notes:r||null,p_requested_by:s||null})}));if(console.log("📊 [InventoryService] Batch transfer creation result:",{data:l,error:o}),o)throw o.code==="23505"?new Error("A transfer request for these items already exists. Please check the transfer approvals section."):o.message&&o.message.includes("function create_batch_transfer")?new Error("Transfer system not properly set up. Please run the database migration script: QUICK_TRANSFER_FIX.sql"):o;return{success:!0,transferId:l,message:`Batch transfer created successfully for ${a.length} sizes`}}catch(i){throw new Error(f(i,"creating batch transfer"))}})}approveTransfer(t,e){return c(this,null,function*(){try{const{data:a,error:r}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",t).single()}));if(r)throw r;const{data:s,error:i}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",a.from_storage_location_id).eq("to_storage_location_id",a.to_storage_location_id).eq("created_at",a.created_at).eq("notes",a.notes).eq("status","pending")}));if(i)throw i;const n=((s==null?void 0:s.length)||0)>1,_=n?"approve_batch_transfer":"approve_transfer";console.log(`🔍 [InventoryService] ${n?"Batch":"Single"} transfer approval for ID: ${t}`);const{data:l,error:o}=yield d(()=>c(this,null,function*(){return yield u.rpc(_,{p_transfer_id:t,p_approved_by:e})}));if(o)throw o;return(l==null?void 0:l[0])||{success:!1,message:"Unknown error"}}catch(a){throw new Error(f(a,"approving transfer"))}})}approveTransferRequest(t,e){return c(this,null,function*(){return yield this.approveTransfer(t,e)})}declineTransfer(t,e){return c(this,null,function*(){try{const{data:a,error:r}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",t).single()}));if(r)throw r;const{data:s,error:i}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",a.from_storage_location_id).eq("to_storage_location_id",a.to_storage_location_id).eq("created_at",a.created_at).eq("notes",a.notes).eq("status","pending")}));if(i)throw i;const n=((s==null?void 0:s.length)||0)>1,_=n?"decline_batch_transfer":"decline_transfer";console.log(`🔍 [InventoryService] ${n?"Batch":"Single"} transfer decline for ID: ${t}`);const{data:l,error:o}=yield d(()=>c(this,null,function*(){return yield u.rpc(_,{p_transfer_id:t,p_approved_by:e})}));if(o)throw o;return(l==null?void 0:l[0])||{success:!1,message:"Unknown error"}}catch(a){throw new Error(f(a,"declining transfer"))}})}completeTransfer(t,e){return c(this,null,function*(){try{console.log(`🔍 [InventoryService] Marking transfer as completed for ID: ${t}`);const{data:a,error:r}=yield d(()=>c(this,null,function*(){return yield u.rpc("complete_transfer",{p_transfer_id:t,p_completed_by:e})}));if(r)throw r;return(a==null?void 0:a[0])||{success:!1,message:"Unknown error"}}catch(a){throw new Error(f(a,"completing transfer"))}})}declineTransferRequest(t,e){return c(this,null,function*(){return yield this.declineTransfer(t,e)})}getPendingTransfers(){return c(this,null,function*(){try{console.log("🔍 [InventoryService] Fetching pending transfers...");const{data:t,error:e}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("*").eq("status","pending").order("created_at",{ascending:!1})}));return console.log("📊 [InventoryService] Pending transfers result:",{data:t,error:e,count:(t==null?void 0:t.length)||0}),e?(console.warn("⚠️ [InventoryService] Error fetching pending transfers:",e),[]):t||[]}catch(t){return console.error("❌ [InventoryService] Error in getPendingTransfers:",t),[]}})}getPendingTransferRequests(){return c(this,null,function*(){return yield this.getPendingTransfers()})}getAvailableStorageLocationsForTransfer(t){return c(this,null,function*(){try{const{data:e,error:a}=yield d(()=>c(this,null,function*(){let s=u.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").eq("status","active").order("name");return t&&(s=s.neq("id",t)),yield s}));if(a)throw a;return yield Promise.all((e||[]).map(s=>c(this,null,function*(){const{data:i,error:n}=yield d(()=>c(this,null,function*(){return yield u.from("sorting_results").select("total_weight_grams").eq("storage_location_id",s.id)}));if(n)return console.warn(`Error calculating usage for ${s.name}:`,n),O(q({},s),{current_usage_kg:s.current_usage_kg||0,available_capacity_kg:(s.capacity_kg||0)-(s.current_usage_kg||0),utilization_percent:s.capacity_kg>0?(s.current_usage_kg||0)/s.capacity_kg*100:0});const _=(i||[]).reduce((g,h)=>g+(h.total_weight_grams||0)/1e3,0),l=Math.max(0,(s.capacity_kg||0)-_),o=s.capacity_kg>0?_/s.capacity_kg*100:0;return console.log(`Storage ${s.name}: Capacity=${s.capacity_kg}kg, Usage=${_.toFixed(2)}kg, Available=${l.toFixed(2)}kg`),O(q({},s),{current_usage_kg:_,available_capacity_kg:l,utilization_percent:o})})))}catch(e){throw new Error(f(e,"fetching available storage locations for transfer"))}})}getTransfersWithItems(t=100){return c(this,null,function*(){return yield this.getTransferHistory(t)})}getTransferHistory(t=100){return c(this,null,function*(){try{console.log("🔍 [InventoryService] Fetching transfer history from transfers table...");const{data:e,error:a}=yield d(()=>c(this,null,function*(){return yield u.from("transfers").select("*").order("created_at",{ascending:!1}).limit(t)}));if(console.log("📊 [InventoryService] Transfers table result:",{data:e,error:a,count:(e==null?void 0:e.length)||0}),a)return console.error("❌ [InventoryService] Error accessing transfers table:",a),[];if(!e||e.length===0)return console.log("⚠️ [InventoryService] No transfer data found in transfers table"),[];const r=[...new Set([...e.map(l=>l.requested_by).filter(Boolean),...e.map(l=>l.approved_by).filter(Boolean)])],{data:s,error:i}=yield d(()=>c(this,null,function*(){return r.length===0?{data:[],error:null}:yield u.from("profiles").select("id, first_name, last_name, email").in("id",r)})),n=new Map;s&&!i&&s.forEach(l=>{n.set(l.id,`${l.first_name} ${l.last_name}`)});const _=e.map(l=>({id:l.id,from_storage:l.from_storage_name||"Unknown",to_storage:l.to_storage_name||"Unknown",size:l.size_class||0,quantity:l.quantity||0,weight_kg:l.weight_kg||0,notes:l.notes||"",status:l.status,created_at:l.created_at,created_by:l.requested_by?n.get(l.requested_by)||`User ${l.requested_by.slice(0,8)}`:"System",approved_by:l.approved_by?n.get(l.approved_by)||`User ${l.approved_by.slice(0,8)}`:null,is_bulk:!1,batch_size:1}));return _.sort((l,o)=>new Date(o.created_at).getTime()-new Date(l.created_at).getTime()),console.log("📊 [InventoryService] Processed transfer data with bulk grouping:",_),_}catch(e){return console.error("Error fetching transfer history:",e),[]}})}}const G=new x;export{G as i};
