var a=(e,r,t)=>new Promise((o,n)=>{var l=s=>{try{i(t.next(s))}catch(g){n(g)}},m=s=>{try{i(t.throw(s))}catch(g){n(g)}},i=s=>s.done?o(s.value):Promise.resolve(s.value).then(l,m);i((t=t.apply(e,r)).next())});import{s as c}from"./index-BCWZ-H89.js";function p(){return a(this,null,function*(){try{const{data:e,error:r}=yield c.from("sorting_batches").select("batch_number").not("batch_number","is",null).order("batch_number",{ascending:!1}).limit(1).maybeSingle();if(r)return console.warn("Error fetching existing batch numbers:",r.message),r.message&&r.message.includes("relation")&&r.message.includes("does not exist")?(console.warn("sorting_batches table does not exist, using timestamp-based batch number"),`Batch${Date.now().toString().slice(-6)}`):`Batch${Date.now().toString().slice(-6)}`;let t=1;if(e!=null&&e.batch_number){const n=e.batch_number.match(/^Batch(\d+)$/);n&&(t=parseInt(n[1],10)+1)}return`Batch${t.toString().padStart(4,"0")}`}catch(e){return console.error("Error generating batch number:",e),`Batch${Date.now().toString().slice(-6)}`}})}function d(){return a(this,null,function*(){try{const{data:e,error:r}=yield c.from("warehouse_entries").select("entry_code").not("entry_code","is",null).order("entry_code",{ascending:!1}).limit(1).maybeSingle();if(r)return console.warn("Error fetching existing entry codes:",r.message),`WE${Date.now().toString().slice(-6)}`;let t=1;if(e!=null&&e.entry_code){const n=e.entry_code.match(/^WE(\d+)$/);n&&(t=parseInt(n[1],10)+1)}return`WE${t.toString().padStart(3,"0")}`}catch(e){return console.error("Error generating unique entry code:",e),`WE${Date.now().toString().slice(-6)}`}})}function w(e){return a(this,null,function*(){try{const{data:r,error:t}=yield c.from("warehouse_entries").select("entry_code").eq("id",e).single();if(t)return console.warn("Error fetching entry code:",t.message),yield d();if(r!=null&&r.entry_code)return r.entry_code;const o=yield d(),{error:n}=yield c.from("warehouse_entries").update({entry_code:o}).eq("id",e);return n&&console.warn("Error updating entry code:",n.message),o}catch(r){return console.error("Error getting/generating entry code:",r),yield d()}})}function u(){return a(this,null,function*(){try{const{data:e,error:r}=yield c.from("processing_records").select("processing_code").not("processing_code","is",null).order("processing_code",{ascending:!1}).limit(1).maybeSingle();if(r)return console.warn("Error fetching existing processing codes:",r.message),`PR${Date.now().toString().slice(-6)}`;let t=1;if(e!=null&&e.processing_code){const n=e.processing_code.match(/^PR(\d+)$/);n&&(t=parseInt(n[1],10)+1)}return`PR${t.toString().padStart(3,"0")}`}catch(e){return console.error("Error generating unique processing code:",e),`PR${Date.now().toString().slice(-6)}`}})}function b(e){return a(this,null,function*(){try{const{data:r,error:t}=yield c.from("processing_records").select("processing_code").eq("id",e).single();if(t)return console.warn("Error fetching processing code:",t.message),yield u();if(r!=null&&r.processing_code)return r.processing_code;const o=yield u(),{error:n}=yield c.from("processing_records").update({processing_code:o}).eq("id",e);return n&&console.warn("Error updating processing code:",n.message),o}catch(r){return console.error("Error getting/generating processing code:",r),yield u()}})}export{p as generateUniqueBatchNumber,d as generateUniqueEntryCode,u as generateUniqueProcessingCode,w as getOrGenerateEntryCode,b as getOrGenerateProcessingCode};
