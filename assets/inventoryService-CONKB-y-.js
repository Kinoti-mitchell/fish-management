import{w as d,s as g,o as u}from"./main-8N3o9mMm.js";class p{async getInventoryByStorage(){try{return console.log("üîç Getting inventory by storage with capacity method (working approach)..."),await this.getInventoryByStorageWithCapacity()}catch(e){console.warn("‚ö†Ô∏è Error in capacity method, falling back to legacy method:",e);try{return await this.getInventoryByStorageFallback()}catch(t){return console.warn("‚ùå Error in fallback method:",t),[]}}}async getInventoryByStorageWithFIFO(){throw console.warn("‚ö†Ô∏è FIFO database function is not available, this method is disabled"),new Error("FIFO_FUNCTION_NOT_AVAILABLE")}async getInventoryByStorageWithCapacity(){try{console.log("üîç Getting all storage locations with capacity data...");const{data:e,error:t}=await d(async()=>await g.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").order("name"));if(t)throw t;console.log("üìä Storage locations from database:",e);const{data:o,error:i}=await d(async()=>await g.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).gt("total_weight_grams",0).order("created_at",{ascending:!1}));if(i)throw i;const a=(o||[]).filter(s=>s.sorting_batch&&s.sorting_batch.status==="completed");console.log("üì¶ Filtered sorting results (completed only):",a.length,"out of",o?.length||0);const r=new Map;console.log("üó∫Ô∏è Creating storage map from locations:",e),e?.forEach(s=>{console.log("üìç Adding storage location to map:",s.id,s.name),r.set(s.id,s)}),console.log("üó∫Ô∏è Storage map created with",r.size,"locations");const n={};e?.forEach(s=>{n[s.id]={storage_location_id:s.id,storage_location_name:s.name,storage_location_type:s.location_type,status:s.status||"active",capacity_kg:s.capacity_kg||0,current_usage_kg:0,available_capacity_kg:s.capacity_kg||0,utilization_percent:0,sizes:{}}}),console.log("üîÑ Processing sorting results:",a.length,"results"),a.forEach(s=>{const l=s.storage_location_id,h=r.get(l);if(console.log("üîç Processing result for storage:",l,"found storage:",!!h),!h){console.warn("‚ö†Ô∏è No storage found for ID:",l,"available storage IDs:",Array.from(r.keys()));return}if(!n[l]){console.warn("‚ö†Ô∏è No storage aggregation found for ID:",l);return}const f=s.size_class,w=s.total_pieces||0,y=(s.total_weight_grams||0)/1e3;w>0&&(n[l].sizes[f]||(n[l].sizes[f]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),n[l].sizes[f].total_quantity+=w,n[l].sizes[f].total_weight_kg+=y,n[l].sizes[f].batch_count+=1,n[l].sizes[f].contributing_batches.push({batch_id:s.sorting_batch_id,batch_number:s.sorting_batch?.batch_number||`BATCH-${s.sorting_batch_id?.slice(-8).toUpperCase()}`,quantity:w,weight_kg:y,storage_location_name:h.name,farmer_name:s.sorting_batch?.processing_record?.warehouse_entry?.farmers?.name||"Unknown",processing_date:s.sorting_batch?.processing_record?.processing_date||"Unknown",added_date:s.sorting_batch?.created_at||new Date().toISOString(),created_at:s.sorting_batch?.created_at||new Date().toISOString(),is_transfer:!!s.transfer_id,transfer_id:s.transfer_id,transfer_source_storage_id:s.transfer_source_storage_id,transfer_source_storage_name:s.transfer_source_storage_name}))}),Object.values(n).forEach(s=>{let l=0;Object.values(s.sizes).forEach(h=>{l+=h.total_weight_kg}),s.current_usage_kg=l,s.available_capacity_kg=Math.max(0,s.capacity_kg-l),s.utilization_percent=s.capacity_kg>0?Math.round(l/s.capacity_kg*100*100)/100:0});const c=[];Object.values(n).forEach(s=>{Object.keys(s.sizes).length===0?c.push({storage_location_id:s.storage_location_id,storage_location_name:s.storage_location_name,storage_location_type:s.storage_location_type,storage_status:s.status||"active",capacity_kg:s.capacity_kg,current_usage_kg:s.current_usage_kg,available_capacity_kg:s.available_capacity_kg,utilization_percent:s.utilization_percent,size:null,total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}):Object.entries(s.sizes).forEach(([l,h])=>{c.push({storage_location_id:s.storage_location_id,storage_location_name:s.storage_location_name,storage_location_type:s.storage_location_type,storage_status:s.status||"active",capacity_kg:s.capacity_kg,current_usage_kg:s.current_usage_kg,available_capacity_kg:s.available_capacity_kg,utilization_percent:s.utilization_percent,size:parseInt(l),total_quantity:h.total_quantity,total_weight_kg:h.total_weight_kg,batch_count:h.batch_count,contributing_batches:h.contributing_batches})})}),console.log("üì¶ Final inventory result with capacity:",c),console.log("üìä Storage aggregation with capacity:",n);const _=c.filter(s=>s.size===9);return console.log("üîç Size 9 in final inventory result:",_),console.log("üîç Size 9 by storage:",_.map(s=>({storage:s.storage_location_name,weight:s.total_weight_kg,hasBatches:s.contributing_batches&&s.contributing_batches.length>0}))),c.sort((s,l)=>s.storage_location_name!==l.storage_location_name?s.storage_location_name.localeCompare(l.storage_location_name):s.size===null&&l.size!==null?-1:s.size!==null&&l.size===null?1:s.size===null&&l.size===null?0:s.size-l.size)}catch(e){throw new Error(u(e,"fetching inventory with capacity tracking"))}}async getInventoryByStorageFallback(){try{console.log("üîç Getting storage locations directly from storage_locations table...");const{data:e,error:t}=await d(async()=>await g.from("storage_locations").select("id, name, status").order("name"));if(console.log("üìä Storage locations from table:",e),console.log("‚ùå Storage error:",t),t){console.warn("Could not fetch storage locations table:",t),console.log("üîÑ Using known storage locations...");const i=new Map;return i.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),i.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),i.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),i.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),i.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),i.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(i)}const o=new Map;return e?.forEach(i=>{o.set(i.id,i.name)}),console.log("‚úÖ Using storage locations from table:",o),this.getInventoryWithStorageMap(o)}catch(e){console.error("Error in getInventoryByStorageFallback:",e);const t=new Map;return t.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),t.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),t.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),t.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),t.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),t.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(t)}}async getInventorySummary(){try{const{data:e,error:t}=await d(async()=>await g.from("inventory").select("*").order("size",{ascending:!0}));if(t)throw t;return(e||[]).map(o=>({size:o.size,quantity:o.quantity,total_weight_kg:this.getEstimatedWeightPerFish(o.size)*o.quantity}))}catch(e){throw new Error(u(e,"fetching inventory summary"))}}getEstimatedWeightPerFish(e){return{0:.2,1:.3,2:.4,3:.5,4:.6,5:.7,6:.8,7:.9,8:1,9:1.1,10:1.2}[e]||.5}async getOldestBatchForRemoval(){try{console.log("üîç Getting oldest batch for removal using inventory data...");const e=await this.getInventoryByStorage();if(console.log("üì¶ Inventory data for FIFO:",e?.length||0),!e||e.length===0)return console.log("üì¶ No inventory data found"),[];const t=new Map;e.forEach(a=>{a.size!==null&&a.total_weight_kg>0&&a.contributing_batches&&a.contributing_batches.forEach(r=>{const n=r.batch_id,c=r.batch_number||`BATCH-${n?.substring(0,8)}`;if(!t.has(n)){const s=r.created_at,l=s?Math.floor((new Date().getTime()-new Date(s).getTime())/(1e3*60*60*24)):0;t.set(n,{batch_id:n,batch_number:c,size_class:a.size,total_weight_kg:0,storage_location_name:a.storage_location_name,created_at:s,processing_date:r.processing_date,farmer_name:r.farmer_name||"Unknown Farmer",days_in_storage:l,batch_status:r.status||"unknown"})}const _=t.get(n);_.total_weight_kg+=a.total_weight_kg})});const o=Array.from(t.values()).filter(a=>a.total_weight_kg>0).sort((a,r)=>{const n=new Date(a.created_at||0).getTime(),c=new Date(r.created_at||0).getTime();return n!==c?n-c:(a.batch_id||"").localeCompare(r.batch_id||"")}).slice(0,10);console.log("üì¶ FIFO batches from inventory data:",o.length),o.length>0&&console.log("üì¶ First FIFO batch:",o[0]);const i=o.filter(a=>a.size_class===9);return console.log("üîç Size 9 batches in FIFO:",i),o}catch(e){return console.error("‚ùå Error in getOldestBatchForRemoval:",e),[]}}async getOldestBatchFallback(){try{console.log("üîç Using fallback method for oldest batches...");const{data:e,error:t}=await g.from("sorting_results").select(`
          id,
          size_class,
          total_pieces,
          total_weight_grams,
          storage_location_id,
          sorting_batch_id,
          created_at,
          storage_location:storage_locations(name)
        `).not("storage_location_id","is",null).gt("total_weight_grams",0).gt("total_pieces",0).order("created_at",{ascending:!0}).limit(20);if(t)return console.warn("‚ö†Ô∏è Error in fallback query:",t),[];if(!e||e.length===0)return console.log("üì¶ No results from fallback query either"),[];const o=e.map(r=>{const n=r.created_at,c=n?Math.floor((new Date().getTime()-new Date(n).getTime())/(1e3*60*60*24)):0;return{batch_id:r.sorting_batch_id||r.id,batch_number:`BATCH-${(r.sorting_batch_id||r.id)?.substring(0,8)}`,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_grams/1e3,storage_location_name:r.storage_location?.name||"Unknown Storage",created_at:n,processing_date:null,farmer_name:"Unknown Farmer",days_in_storage:c,batch_status:"unknown"}}),i=new Map;o.forEach(r=>{r.batch_id&&!i.has(r.batch_id)&&i.set(r.batch_id,r)});const a=Array.from(i.values()).slice(0,10);return console.log("üì¶ Fallback method found:",a.length,"batches"),a}catch(e){return console.error("‚ùå Error in fallback method:",e),[]}}async getBatchDetails(e){try{console.log("üîç Getting batch details for:",e);const{data:t,error:o}=await d(async()=>await g.from("sorting_batches").select(`
            id,
            batch_number,
            status,
            created_at,
            processing_record:processing_records(
              id,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                entry_date,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("id",e).single());if(o)return console.warn("‚ö†Ô∏è Error fetching batch details:",o),null;const{data:i,error:a}=await d(async()=>await g.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            storage_location:storage_locations(
              id,
              name
            )
          `).eq("sorting_batch_id",e).gt("total_pieces",0).order("size_class"));if(a)return console.warn("‚ö†Ô∏è Error fetching batch sizes:",a),null;const r={batch:t,sizes:(i||[]).map(n=>({size_class:n.size_class,total_pieces:n.total_pieces,total_weight_kg:n.total_weight_grams/1e3,storage_location_name:n.storage_location?.name}))};return console.log("üì¶ Batch details processed:",r),r}catch(t){return console.error("‚ùå Error in getBatchDetails:",t),null}}async getSizeDemandStatistics(){try{console.log("üîç Getting size demand statistics from outlet orders...");const{data:e,error:t}=await d(async()=>await g.from("outlet_orders").select(`
            id,
            requested_sizes,
            requested_quantity,
            requested_grade,
            order_date,
            status,
            outlet:outlets(
              id,
              name,
              location
            )
          `).not("requested_sizes","is",null).order("order_date",{ascending:!1}));if(t)return console.warn("‚ö†Ô∏è Error fetching outlet orders data:",t),[];console.log("üì¶ Raw outlet orders data:",e);const o=(e||[]).filter(r=>["confirmed","processing","dispatched","delivered"].includes(r.status)&&r.requested_quantity>0);console.log("üì¶ Valid outlet orders:",o);const i=new Map;o.forEach(r=>{r.requested_sizes&&Array.isArray(r.requested_sizes)&&r.requested_sizes.forEach(n=>{i.has(n)||i.set(n,{size_class:n,total_orders:0,total_weight_kg_requested:0,outlet_count:new Set,first_order_date:null,last_order_date:null,grade_preferences:new Map});const c=i.get(n);if(c.total_orders+=1,c.total_weight_kg_requested+=r.requested_quantity||0,c.outlet_count.add(r.outlet?.id),r.requested_grade){const s=c.grade_preferences.get(r.requested_grade)||0;c.grade_preferences.set(r.requested_grade,s+1)}const _=new Date(r.order_date);(!c.first_order_date||_<new Date(c.first_order_date))&&(c.first_order_date=r.order_date),(!c.last_order_date||_>new Date(c.last_order_date))&&(c.last_order_date=r.order_date)})});const a=Array.from(i.values()).map(r=>({size_class:r.size_class,total_orders:r.total_orders,total_weight_kg_requested:r.total_weight_kg_requested,unique_outlets:r.outlet_count.size,first_order_date:r.first_order_date,last_order_date:r.last_order_date,days_span:r.first_order_date&&r.last_order_date?Math.ceil((new Date(r.last_order_date).getTime()-new Date(r.first_order_date).getTime())/(1e3*60*60*24)):0,most_requested_grade:Array.from(r.grade_preferences.entries()).sort((n,c)=>c[1]-n[1])[0]?.[0]||"any"})).filter(r=>r.total_weight_kg_requested>0).sort((r,n)=>n.total_weight_kg_requested-r.total_weight_kg_requested);return console.log("üìä Size demand statistics from outlet orders:",a),a}catch(e){return console.error("‚ùå Error in getSizeDemandStatistics:",e),[]}}async getInventoryWithStorageMap(e){try{const{data:t,error:o}=await d(async()=>await g.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).order("created_at",{ascending:!1}));if(o)throw o;const i=(t||[]).filter(n=>n.sorting_batch&&n.sorting_batch.status==="completed");console.log("üì¶ Filtered sorting results (completed only):",i.length,"out of",t?.length||0);const a={};i.forEach(n=>{const c=n.storage_location_id||"unknown",_=e.get(c)||"Unknown Storage",s=n.size_class,l=n.total_pieces||0,h=(n.total_weight_grams||0)/1e3;if(l>0){a[c]||(a[c]={storage_location_id:c,storage_location_name:_,sizes:{}}),a[c].sizes[s]||(a[c].sizes[s]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),a[c].sizes[s].total_quantity+=l,a[c].sizes[s].total_weight_kg+=h,a[c].sizes[s].batch_count+=1;const f=!!n.transfer_id&&n.transfer_source_storage_name;a[c].sizes[s].contributing_batches.push({batch_id:n.sorting_batch_id,batch_number:n.sorting_batch?.batch_number||`BATCH-${n.sorting_batch_id?.slice(-8).toUpperCase()}`,quantity:l,weight_kg:h,storage_location_name:_,farmer_name:f?`${n.sorting_batch?.processing_record?.warehouse_entry?.farmers?.name||"Unknown"} (Transferred from ${n.transfer_source_storage_name})`:n.sorting_batch?.processing_record?.warehouse_entry?.farmers?.name||"Unknown",processing_date:n.sorting_batch?.processing_record?.processing_date||"Unknown",added_date:n.sorting_batch?.created_at||new Date().toISOString(),created_at:n.sorting_batch?.created_at||new Date().toISOString(),...f&&{is_transfer:!0,transfer_id:n.transfer_id,transfer_source_storage_id:n.transfer_source_storage_id,transfer_source_storage_name:n.transfer_source_storage_name}})}});const r=[];return Object.values(a).forEach(n=>{Object.entries(n.sizes).forEach(([c,_])=>{r.push({storage_location_id:n.storage_location_id,storage_location_name:n.storage_location_name,size:parseInt(c),total_quantity:_.total_quantity,total_weight_kg:_.total_weight_kg,batch_count:_.batch_count,contributing_batches:_.contributing_batches})})}),console.log("üì¶ Final inventory result:",r),console.log("üìä Storage aggregation:",a),r.sort((n,c)=>n.storage_location_name!==c.storage_location_name?n.storage_location_name.localeCompare(c.storage_location_name):n.size-c.size)}catch(t){throw new Error(u(t,"fetching inventory with storage map"))}}async getInventoryFromSortingBatchesFallback(e){try{const{data:t,error:o}=await d(async()=>await g.from("sorting_batches").select(`
            id,
            batch_number,
            size_distribution,
            created_at,
            storage_location_id,
            processing_record:processing_records(
              id,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").not("size_distribution","is",null).order("created_at",{ascending:!1}));if(o)throw o;const i={};return t?.forEach(a=>{a.size_distribution&&typeof a.size_distribution=="object"&&Object.entries(a.size_distribution).forEach(([r,n])=>{const c=parseInt(r),_=parseInt(n)||0;if(!isNaN(c)&&_>0){const s=this.getEstimatedWeightPerFish(c),l=_*s;i[c]||(i[c]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[],storage_locations:{}}),i[c].total_quantity+=_,i[c].total_weight_kg+=l,i[c].batch_count+=1,i[c].contributing_batches.push({batch_id:a.id,batch_number:a.batch_number||`BATCH-${a.id?.slice(-8).toUpperCase()}`,quantity:_,weight_kg:l,storage_location_id:a.storage_location_id,storage_location_name:e.get(a.storage_location_id)||"Unknown Storage",farmer_name:a.processing_record?.warehouse_entry?.farmers?.name||"Unknown",processing_date:a.processing_record?.processing_date||"Unknown",added_date:a.created_at,created_at:a.created_at}),a.storage_location_id&&(i[c].storage_locations[a.storage_location_id]={storage_location_name:e.get(a.storage_location_id)||"Unknown Storage",quantity:(i[c].storage_locations[a.storage_location_id]?.quantity||0)+_,weight_kg:(i[c].storage_locations[a.storage_location_id]?.weight_kg||0)+l})}})}),Object.entries(i).map(([a,r])=>({size:parseInt(a),quantity:r.total_quantity,total_weight_kg:r.total_weight_kg,batch_count:r.batch_count,storage_locations:r.storage_locations,contributing_batches:r.contributing_batches})).sort((a,r)=>a.size-r.size)}catch(t){throw new Error(u(t,"fetching inventory from sorting batches fallback"))}}async getBatchesForSize(e){try{const{data:t,error:o}=await d(async()=>await g.rpc("get_batches_for_size",{p_size:e}));if(o)throw o;return t||[]}catch(t){throw new Error(u(t,"fetching batches for size"))}}async getStorageCapacityStatus(){try{const{data:e,error:t}=await d(async()=>await g.rpc("get_storage_capacity_status"));if(t)throw t;return e||[]}catch(e){throw new Error(u(e,"fetching storage capacity status"))}}async getAvailableStorageLocationsForSorting(e=0){try{const{data:t,error:o}=await d(async()=>await g.rpc("get_available_storage_locations_for_sorting",{p_required_weight_kg:e}));if(o)throw o;return t||[]}catch(t){throw new Error(u(t,"fetching available storage locations"))}}async validateStorageLocationForSorting(e,t=0){try{const{data:o,error:i}=await d(async()=>await g.rpc("validate_storage_location_for_sorting",{p_storage_location_id:e,p_estimated_weight_kg:t}));if(i)throw i;return o?.[0]||{is_valid:!1,message:"Validation failed",storage_location_name:"",available_capacity_kg:0,utilization_percent:0}}catch(o){throw new Error(u(o,"validating storage location"))}}async getInventoryItems(){try{const{data:e,error:t}=await d(async()=>await g.from("inventory").select("*").order("size",{ascending:!0}));if(t)throw t;return e||[]}catch(e){throw new Error(u(e,"fetching inventory items"))}}async getInventoryEntries(e=100){try{const{data:t,error:o}=await d(async()=>await g.from("inventory_entries").select("*").order("created_at",{ascending:!1}).limit(e));if(o)throw o;return t||[]}catch(t){throw new Error(u(t,"fetching inventory entries"))}}async addStockFromSorting(e){try{const{data:t,error:o}=await d(async()=>await g.rpc("add_stock_from_sorting",{p_sorting_batch_id:e}));if(o)throw o;return t||[]}catch(t){throw new Error(u(t,"adding stock from sorting batch"))}}async getSortingBatchesForInventory(){try{const{data:e,error:t}=await d(async()=>await g.from("sorting_batches").select(`
            *,
            processing_record:processing_records(
              id,
              post_processing_weight,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                entry_date,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").order("created_at",{ascending:!1}));if(t)throw t;return await Promise.all((e||[]).map(async i=>{const{data:a,error:r}=await d(async()=>await g.from("sorting_results").select("*").eq("sorting_batch_id",i.id).order("size_class"));return r?(console.warn(`Error fetching results for batch ${i.id}:`,r),{...i,results:[]}):{...i,results:a||[]}}))}catch(e){throw new Error(u(e,"fetching sorting batches for inventory"))}}async validateSortingBatchForInventory(e){try{const{data:t,error:o}=await d(async()=>await g.rpc("validate_sorting_batch_for_inventory",{p_sorting_batch_id:e}));if(o)throw o;return t||{canAdd:!1,reason:"Unknown error"}}catch(t){throw new Error(u(t,"validating sorting batch for inventory"))}}async getInventoryBySize(e){try{const{data:t,error:o}=await d(async()=>await g.from("inventory").select("*").eq("size",e).single());if(o&&o.code!=="PGRST116")throw o;return t||null}catch(t){throw new Error(u(t,`fetching inventory for size ${e}`))}}async getInventoryStats(){try{const{data:e,error:t}=await d(async()=>await g.rpc("get_inventory_statistics"));if(t)throw t;return e||{total_quantity:0,total_weight:0,size_distribution:{},last_updated:new Date().toISOString()}}catch(e){throw new Error(u(e,"fetching inventory statistics"))}}async createInventoryAdjustment(e,t,o){try{const{data:i,error:a}=await d(async()=>await g.from("inventory_entries").insert({size:e,quantity_change:t,entry_type:"adjustment",notes:o}).select().single());if(a)throw a;return i}catch(i){throw new Error(u(i,"creating inventory adjustment"))}}async updateInventory(e,t){try{const{data:o,error:i}=await d(async()=>await g.from("inventory").update({quantity:t,updated_at:new Date().toISOString()}).eq("id",e).select().single());if(i)throw i;return o}catch(o){throw new Error(u(o,"updating inventory item"))}}async processFIFOOrderFulfillment(e,t,o,i){try{const{data:a,error:r}=await d(async()=>await g.rpc("process_fifo_order_fulfillment",{p_order_id:e,p_size:t,p_required_quantity:o,p_required_weight_kg:i}));if(r){if(r.code==="PGRST202"||r.message?.includes("Could not find the function"))return console.warn("‚ö†Ô∏è FIFO order fulfillment function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",allocatedBatches:[],remainingQuantity:o,remainingWeightKg:i};throw r}return a?.[0]||{success:!1,message:"Unknown error",allocatedBatches:[],remainingQuantity:0,remainingWeightKg:0}}catch(a){throw new Error(u(a,"processing FIFO order fulfillment"))}}async reduceInventoryOnOrderApproval(e,t,o,i){try{const{data:a,error:r}=await d(async()=>await g.rpc("reduce_inventory_on_order_approval",{p_order_id:e,p_size:t,p_quantity:o,p_weight_kg:i}));if(r){if(r.code==="PGRST202"||r.message?.includes("Could not find the function"))return console.warn("‚ö†Ô∏è FIFO inventory reduction function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",reducedBatches:[]};throw r}return a?.[0]||{success:!1,message:"Unknown error",reducedBatches:[]}}catch(a){throw new Error(u(a,"reducing inventory on order approval"))}}async transferInventoryBetweenStorage(e,t,o,i,a){try{const{data:r,error:n}=await d(async()=>await g.rpc("transfer_inventory_between_storage",{p_from_storage_location_id:e,p_to_storage_location_id:t,p_size:o,p_quantity:i,p_notes:a||null}));if(n){if(n.code==="PGRST202"||n.message?.includes("Could not find the function"))return console.warn("‚ö†Ô∏è Transfer function not found. Please run the database script: db/fix_inventory_storage_integration.sql"),{success:!1,message:"Transfer function not available. Please run the database setup script.",from_remaining:0,to_new_total:0};throw n}return r?.[0]||{success:!1,message:"Unknown error",from_remaining:0,to_new_total:0}}catch(r){throw new Error(u(r,"transferring inventory between storage locations"))}}async createTransfer(e,t,o,i,a,r){try{const{data:n,error:c}=await d(async()=>await g.rpc("create_transfer",{p_from_storage_location_id:e,p_to_storage_location_id:t,p_size:o,p_quantity:i,p_weight_kg:a,p_notes:r||null}));if(c)throw c;return{success:!0,transferId:n,message:"Transfer created successfully"}}catch(n){throw new Error(u(n,"creating transfer"))}}async createTransferRequest(e,t,o,i,a,r){const n=await this.createTransfer(e,t,o,i,a,r);return{success:n.success,requestId:n.transferId,message:n.message}}async createBatchTransfer(e,t,o,i,a){try{const{data:r,error:n}=await d(async()=>await g.from("transfers").select("id, size_class, quantity, weight_kg, notes").eq("from_storage_location_id",e).eq("to_storage_location_id",t).eq("status","pending"));if(n)console.warn("Could not check for existing transfers:",n);else if(r&&r.length>0&&o.some(l=>r.some(h=>h.size_class===l.size&&h.quantity===l.quantity&&Math.abs(h.weight_kg-l.weightKg)<.01)))throw new Error("A transfer request for these items already exists. Please check the transfer approvals section.");console.log("üîç [InventoryService] Creating batch transfer with data:",{fromStorageLocationId:e,toStorageLocationId:t,sizeData:o,notes:i});const{data:c,error:_}=await d(async()=>await g.rpc("create_batch_transfer",{p_from_storage_location_id:e,p_to_storage_location_id:t,p_size_data:o,p_notes:i||null,p_requested_by:a||null}));if(console.log("üìä [InventoryService] Batch transfer creation result:",{data:c,error:_}),_)throw _.code==="23505"?new Error("A transfer request for these items already exists. Please check the transfer approvals section."):_.message&&_.message.includes("function create_batch_transfer")?new Error("Transfer system not properly set up. Please run the database migration script: QUICK_TRANSFER_FIX.sql"):_;return{success:!0,transferId:c,message:`Batch transfer created successfully for ${o.length} sizes`}}catch(r){throw new Error(u(r,"creating batch transfer"))}}async approveTransfer(e,t){try{const{data:o,error:i}=await d(async()=>await g.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",e).single());if(i)throw i;const{data:a,error:r}=await d(async()=>await g.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",o.from_storage_location_id).eq("to_storage_location_id",o.to_storage_location_id).eq("created_at",o.created_at).eq("notes",o.notes).eq("status","pending"));if(r)throw r;const n=(a?.length||0)>1,c=n?"approve_batch_transfer":"approve_transfer";console.log(`üîç [InventoryService] ${n?"Batch":"Single"} transfer approval for ID: ${e}`);const{data:_,error:s}=await d(async()=>await g.rpc(c,{p_transfer_id:e,p_approved_by:t}));if(s)throw s;return _?.[0]||{success:!1,message:"Unknown error"}}catch(o){throw new Error(u(o,"approving transfer"))}}async approveTransferRequest(e,t){return await this.approveTransfer(e,t)}async declineTransfer(e,t){try{const{data:o,error:i}=await d(async()=>await g.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",e).single());if(i)throw i;const{data:a,error:r}=await d(async()=>await g.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",o.from_storage_location_id).eq("to_storage_location_id",o.to_storage_location_id).eq("created_at",o.created_at).eq("notes",o.notes).eq("status","pending"));if(r)throw r;const n=(a?.length||0)>1,c=n?"decline_batch_transfer":"decline_transfer";console.log(`üîç [InventoryService] ${n?"Batch":"Single"} transfer decline for ID: ${e}`);const{data:_,error:s}=await d(async()=>await g.rpc(c,{p_transfer_id:e,p_approved_by:t}));if(s)throw s;return _?.[0]||{success:!1,message:"Unknown error"}}catch(o){throw new Error(u(o,"declining transfer"))}}async completeTransfer(e,t){try{console.log(`üîç [InventoryService] Marking transfer as completed for ID: ${e}`);const{data:o,error:i}=await d(async()=>await g.rpc("complete_transfer",{p_transfer_id:e,p_completed_by:t}));if(i)throw i;return o?.[0]||{success:!1,message:"Unknown error"}}catch(o){throw new Error(u(o,"completing transfer"))}}async declineTransferRequest(e,t){return await this.declineTransfer(e,t)}async getPendingTransfers(){try{console.log("üîç [InventoryService] Fetching pending transfers...");const{data:e,error:t}=await d(async()=>await g.from("transfers").select("*").eq("status","pending").order("created_at",{ascending:!1}));return console.log("üìä [InventoryService] Pending transfers result:",{data:e,error:t,count:e?.length||0}),t?(console.warn("‚ö†Ô∏è [InventoryService] Error fetching pending transfers:",t),[]):e||[]}catch(e){return console.error("‚ùå [InventoryService] Error in getPendingTransfers:",e),[]}}async getPendingTransferRequests(){return await this.getPendingTransfers()}async getAvailableStorageLocationsForTransfer(e){try{const{data:t,error:o}=await d(async()=>{let a=g.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").eq("status","active").order("name");return e&&(a=a.neq("id",e)),await a});if(o)throw o;return await Promise.all((t||[]).map(async a=>{const{data:r,error:n}=await d(async()=>await g.from("sorting_results").select("total_weight_grams").eq("storage_location_id",a.id));if(n)return console.warn(`Error calculating usage for ${a.name}:`,n),{...a,current_usage_kg:a.current_usage_kg||0,available_capacity_kg:(a.capacity_kg||0)-(a.current_usage_kg||0),utilization_percent:a.capacity_kg>0?(a.current_usage_kg||0)/a.capacity_kg*100:0};const c=(r||[]).reduce((l,h)=>l+(h.total_weight_grams||0)/1e3,0),_=Math.max(0,(a.capacity_kg||0)-c),s=a.capacity_kg>0?c/a.capacity_kg*100:0;return console.log(`Storage ${a.name}: Capacity=${a.capacity_kg}kg, Usage=${c.toFixed(2)}kg, Available=${_.toFixed(2)}kg`),{...a,current_usage_kg:c,available_capacity_kg:_,utilization_percent:s}}))}catch(t){throw new Error(u(t,"fetching available storage locations for transfer"))}}async getTransferHistory(e=100){try{console.log("üîç [InventoryService] Fetching transfer history from transfers table...");const{data:t,error:o}=await d(async()=>await g.from("transfers").select("*").order("created_at",{ascending:!1}).limit(e));if(console.log("üìä [InventoryService] Transfers table result:",{data:t,error:o,count:t?.length||0}),o)return console.error("‚ùå [InventoryService] Error accessing transfers table:",o),[];if(!t||t.length===0)return console.log("‚ö†Ô∏è [InventoryService] No transfer data found in transfers table"),[];const i=[...new Set([...t.map(_=>_.requested_by).filter(Boolean),...t.map(_=>_.approved_by).filter(Boolean)])],{data:a,error:r}=await d(async()=>i.length===0?{data:[],error:null}:await g.from("profiles").select("id, first_name, last_name, email").in("id",i)),n=new Map;a&&!r&&a.forEach(_=>{n.set(_.id,`${_.first_name} ${_.last_name}`)});const c=t.map(_=>({id:_.id,from_storage:_.from_storage_name||"Unknown",to_storage:_.to_storage_name||"Unknown",size:_.size_class,quantity:_.quantity,weight_kg:_.weight_kg||0,notes:_.notes||"",status:_.status,created_at:_.created_at,created_by:_.requested_by?n.get(_.requested_by)||`User ${_.requested_by.slice(0,8)}`:"System",approved_by:_.approved_by?n.get(_.approved_by)||`User ${_.approved_by.slice(0,8)}`:null,is_bulk:!1,batch_size:1}));return c.sort((_,s)=>new Date(s.created_at).getTime()-new Date(_.created_at).getTime()),console.log("üìä [InventoryService] Processed transfer data with bulk grouping:",c),c}catch(t){return console.error("Error fetching transfer history:",t),[]}}}const v=new p;export{v as i};
