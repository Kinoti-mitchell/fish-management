import{K as c}from"./index-Cx51dYQZ.js";var i=(e,r,n)=>new Promise((t,o)=>{var u=s=>{try{a(n.next(s))}catch(l){o(l)}},m=s=>{try{a(n.throw(s))}catch(l){o(l)}},a=s=>s.done?t(s.value):Promise.resolve(s.value).then(u,m);a((n=n.apply(e,r)).next())});function y(){return i(this,null,function*(){try{const{data:e,error:r}=yield c.from("sorting_batches").select("batch_number").not("batch_number","is",null).order("batch_number",{ascending:!1}).limit(1).maybeSingle();if(r)return console.warn("Error fetching existing batch numbers:",r.message),r.message&&r.message.includes("relation")&&r.message.includes("does not exist")?(console.warn("sorting_batches table does not exist, using timestamp-based batch number"),`Batch${Date.now().toString().slice(-6)}`):`Batch${Date.now().toString().slice(-6)}`;let n=1;if(e!=null&&e.batch_number){const t=e.batch_number.match(/^Batch(\d+)$/);t&&(n=parseInt(t[1],10)+1)}return`Batch${n.toString().padStart(4,"0")}`}catch(e){return console.error("Error generating batch number:",e),`Batch${Date.now().toString().slice(-6)}`}})}function g(){return i(this,null,function*(){try{const{data:e,error:r}=yield c.from("warehouse_entries").select("entry_code").not("entry_code","is",null).order("entry_code",{ascending:!1}).limit(1).maybeSingle();if(r)return console.warn("Error fetching existing entry codes:",r.message),`WE${Date.now().toString().slice(-6)}`;let n=1;if(e!=null&&e.entry_code){const t=e.entry_code.match(/^WE(\d+)$/);t&&(n=parseInt(t[1],10)+1)}return`WE${n.toString().padStart(3,"0")}`}catch(e){return console.error("Error generating unique entry code:",e),`WE${Date.now().toString().slice(-6)}`}})}function f(e){return i(this,null,function*(){try{const{data:r,error:n}=yield c.from("warehouse_entries").select("entry_code").eq("id",e).single();if(n)return console.warn("Error fetching entry code:",n.message),yield g();if(r!=null&&r.entry_code)return r.entry_code;const t=yield g(),{error:o}=yield c.from("warehouse_entries").update({entry_code:t}).eq("id",e);return o&&console.warn("Error updating entry code:",o.message),t}catch(r){return console.error("Error getting/generating entry code:",r),yield g()}})}function d(){return i(this,null,function*(){try{const{data:e,error:r}=yield c.from("processing_records").select("processing_code").not("processing_code","is",null).order("processing_code",{ascending:!1}).limit(1).maybeSingle();if(r)return console.warn("Error fetching existing processing codes:",r.message),`PR${Date.now().toString().slice(-6)}`;let n=1;if(e!=null&&e.processing_code){const t=e.processing_code.match(/^PR(\d+)$/);t&&(n=parseInt(t[1],10)+1)}return`PR${n.toString().padStart(3,"0")}`}catch(e){return console.error("Error generating unique processing code:",e),`PR${Date.now().toString().slice(-6)}`}})}function p(e){return i(this,null,function*(){try{const{data:r,error:n}=yield c.from("processing_records").select("processing_code").eq("id",e).single();if(n)return console.warn("Error fetching processing code:",n.message),yield d();if(r!=null&&r.processing_code)return r.processing_code;const t=yield d(),{error:o}=yield c.from("processing_records").update({processing_code:t}).eq("id",e);return o&&console.warn("Error updating processing code:",o.message),t}catch(r){return console.error("Error getting/generating processing code:",r),yield d()}})}export{y as generateUniqueBatchNumber,g as generateUniqueEntryCode,d as generateUniqueProcessingCode,f as getOrGenerateEntryCode,p as getOrGenerateProcessingCode};
