import{j as u,J as d,k as h}from"./index-D0a7Ul_G.js";var D=Object.defineProperty,$=Object.defineProperties,j=Object.getOwnPropertyDescriptors,A=Object.getOwnPropertySymbols,x=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable,C=(b,e,t)=>e in b?D(b,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):b[e]=t,T=(b,e)=>{for(var t in e||(e={}))x.call(e,t)&&C(b,t,e[t]);if(A)for(var t of A(e))M.call(e,t)&&C(b,t,e[t]);return b},B=(b,e)=>$(b,j(e)),s=(b,e,t)=>new Promise((n,r)=>{var c=_=>{try{o(t.next(_))}catch(l){r(l)}},i=_=>{try{o(t.throw(_))}catch(l){r(l)}},o=_=>_.done?n(_.value):Promise.resolve(_.value).then(c,i);o((t=t.apply(b,e)).next())});class N{getInventoryByStorage(){return s(this,null,function*(){try{return console.log("🔍 Getting inventory by storage with capacity method (working approach)..."),yield this.getInventoryByStorageWithCapacity()}catch(e){console.warn("⚠️ Error in capacity method, falling back to legacy method:",e);try{return yield this.getInventoryByStorageFallback()}catch(t){return console.warn("❌ Error in fallback method:",t),[]}}})}getInventoryByStorageWithFIFO(){return s(this,null,function*(){throw console.warn("⚠️ FIFO database function is not available, this method is disabled"),new Error("FIFO_FUNCTION_NOT_AVAILABLE")})}getInventoryByStorageWithCapacity(){return s(this,null,function*(){try{console.log("🔍 Getting all storage locations with capacity data...");const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").order("name")}));if(t)throw t;console.log("📊 Storage locations from database:",e);const{data:n,error:r}=yield u(()=>s(this,null,function*(){return yield d.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).gt("total_weight_grams",0).order("created_at",{ascending:!1})}));if(r)throw r;const c=(n||[]).filter(a=>a.sorting_batch&&a.sorting_batch.status==="completed");console.log("📦 Filtered sorting results (completed only):",c.length,"out of",(n==null?void 0:n.length)||0);const i=new Map;console.log("🗺️ Creating storage map from locations:",e),e==null||e.forEach(a=>{console.log("📍 Adding storage location to map:",a.id,a.name),i.set(a.id,a)}),console.log("🗺️ Storage map created with",i.size,"locations");const o={};e==null||e.forEach(a=>{o[a.id]={storage_location_id:a.id,storage_location_name:a.name,storage_location_type:a.location_type,status:a.status||"active",capacity_kg:a.capacity_kg||0,current_usage_kg:0,available_capacity_kg:a.capacity_kg||0,utilization_percent:0,sizes:{}}}),console.log("🔄 Processing sorting results:",c.length,"results"),c.forEach(a=>{var g,f,q,S,y,w,I,k,F,O;const p=a.storage_location_id,m=i.get(p);if(console.log("🔍 Processing result for storage:",p,"found storage:",!!m),!m){console.warn("⚠️ No storage found for ID:",p,"available storage IDs:",Array.from(i.keys()));return}if(!o[p]){console.warn("⚠️ No storage aggregation found for ID:",p);return}const z=a.size_class,v=a.total_pieces||0,E=(a.total_weight_grams||0)/1e3;v>0&&(o[p].sizes[z]||(o[p].sizes[z]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),o[p].sizes[z].total_quantity+=v,o[p].sizes[z].total_weight_kg+=E,o[p].sizes[z].batch_count+=1,o[p].sizes[z].contributing_batches.push({batch_id:a.sorting_batch_id,batch_number:((g=a.sorting_batch)==null?void 0:g.batch_number)||`BATCH-${(f=a.sorting_batch_id)==null?void 0:f.slice(-8).toUpperCase()}`,quantity:v,weight_kg:E,storage_location_name:m.name,farmer_name:((w=(y=(S=(q=a.sorting_batch)==null?void 0:q.processing_record)==null?void 0:S.warehouse_entry)==null?void 0:y.farmers)==null?void 0:w.name)||"Unknown",processing_date:((k=(I=a.sorting_batch)==null?void 0:I.processing_record)==null?void 0:k.processing_date)||"Unknown",added_date:((F=a.sorting_batch)==null?void 0:F.created_at)||new Date().toISOString(),created_at:((O=a.sorting_batch)==null?void 0:O.created_at)||new Date().toISOString(),is_transfer:!!a.transfer_id,transfer_id:a.transfer_id,transfer_source_storage_id:a.transfer_source_storage_id,transfer_source_storage_name:a.transfer_source_storage_name}))}),Object.values(o).forEach(a=>{let g=0;Object.values(a.sizes).forEach(f=>{g+=f.total_weight_kg}),a.current_usage_kg=g,a.available_capacity_kg=Math.max(0,a.capacity_kg-g),a.utilization_percent=a.capacity_kg>0?Math.round(g/a.capacity_kg*100*100)/100:0});const _=[];Object.values(o).forEach(a=>{Object.keys(a.sizes).length===0?_.push({storage_location_id:a.storage_location_id,storage_location_name:a.storage_location_name,storage_location_type:a.storage_location_type,storage_status:a.status||"active",capacity_kg:a.capacity_kg,current_usage_kg:a.current_usage_kg,available_capacity_kg:a.available_capacity_kg,utilization_percent:a.utilization_percent,size:null,total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}):Object.entries(a.sizes).forEach(([g,f])=>{_.push({storage_location_id:a.storage_location_id,storage_location_name:a.storage_location_name,storage_location_type:a.storage_location_type,storage_status:a.status||"active",capacity_kg:a.capacity_kg,current_usage_kg:a.current_usage_kg,available_capacity_kg:a.available_capacity_kg,utilization_percent:a.utilization_percent,size:parseInt(g),total_quantity:f.total_quantity,total_weight_kg:f.total_weight_kg,batch_count:f.batch_count,contributing_batches:f.contributing_batches})})}),console.log("📦 Final inventory result with capacity:",_),console.log("📊 Storage aggregation with capacity:",o);const l=_.filter(a=>a.size===9);return console.log("🔍 Size 9 in final inventory result:",l),console.log("🔍 Size 9 by storage:",l.map(a=>({storage:a.storage_location_name,weight:a.total_weight_kg,hasBatches:a.contributing_batches&&a.contributing_batches.length>0}))),_.sort((a,g)=>a.storage_location_name!==g.storage_location_name?a.storage_location_name.localeCompare(g.storage_location_name):a.size===null&&g.size!==null?-1:a.size!==null&&g.size===null?1:a.size===null&&g.size===null?0:a.size-g.size)}catch(e){throw new Error(h(e,"fetching inventory with capacity tracking"))}})}getInventoryByStorageFallback(){return s(this,null,function*(){try{console.log("🔍 Getting storage locations directly from storage_locations table...");const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("storage_locations").select("id, name, status").order("name")}));if(console.log("📊 Storage locations from table:",e),console.log("❌ Storage error:",t),t){console.warn("Could not fetch storage locations table:",t),console.log("🔄 Using known storage locations...");const r=new Map;return r.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),r.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),r.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),r.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),r.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),r.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(r)}const n=new Map;return e==null||e.forEach(r=>{n.set(r.id,r.name)}),console.log("✅ Using storage locations from table:",n),this.getInventoryWithStorageMap(n)}catch(e){console.error("Error in getInventoryByStorageFallback:",e);const t=new Map;return t.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),t.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),t.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),t.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),t.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),t.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(t)}})}getInventorySummary(){return s(this,null,function*(){try{const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("inventory").select("*").order("size",{ascending:!0})}));if(t)throw t;return(e||[]).map(n=>({size:n.size,quantity:n.quantity,total_weight_kg:this.getEstimatedWeightPerFish(n.size)*n.quantity}))}catch(e){throw new Error(h(e,"fetching inventory summary"))}})}getEstimatedWeightPerFish(e){return{0:.2,1:.3,2:.4,3:.5,4:.6,5:.7,6:.8,7:.9,8:1,9:1.1,10:1.2}[e]||.5}getOldestBatchForRemoval(){return s(this,null,function*(){try{console.log("🔍 Getting oldest batches available for ordering (FIFO)...");const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_batches_available_for_order")}));if(t)return console.warn("⚠️ Error fetching batches available for order:",t),yield this.getOldestBatchFallback();if(!e||e.length===0)return console.log("📦 No batches available for ordering"),[];const n=e.map(r=>({batch_id:r.batch_id,batch_number:r.batch_number,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_kg,storage_location_name:r.storage_location_name,created_at:r.created_at,processing_date:r.processing_date,farmer_name:r.farmer_name,days_in_storage:r.days_in_storage,batch_status:"completed",available_for_order:!0,priority_score:r.priority_score}));return console.log("📦 FIFO batches available for ordering:",n.length),n.length>0&&console.log("📦 First available batch:",n[0]),n.slice(0,10)}catch(e){return console.error("❌ Error in getOldestBatchForRemoval:",e),[]}})}getOldestBatchFallback(){return s(this,null,function*(){try{console.log("🔍 Using fixed fallback method for oldest batches...");const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_oldest_batches_fixed")}));if(t)return console.warn("⚠️ Error in fixed fallback query:",t),[];if(!e||e.length===0)return console.log("📦 No results from fixed fallback query"),[];const n=e.map(r=>({batch_id:r.batch_id,batch_number:r.batch_number,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_kg,storage_location_name:r.storage_location_name,created_at:r.created_at,processing_date:r.processing_date,farmer_name:r.farmer_name,days_in_storage:r.days_in_storage,batch_status:"completed"}));return console.log("📦 Fixed fallback method found:",n.length,"batches"),n.slice(0,10)}catch(e){return console.error("❌ Error in fixed fallback method:",e),[]}})}getBatchDetails(e){return s(this,null,function*(){try{console.log("🔍 Getting batch details for:",e);const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_batch_details_fixed",{p_batch_id:e})}));if(n)return console.warn("⚠️ Error fetching batch details:",n),null;if(!t||t.length===0)return console.warn("⚠️ No batch details found for:",e),null;const r=t[0],c={batch:{id:r.batch_id,batch_number:r.batch_number,status:r.status,created_at:r.created_at,processing_record:{processing_date:r.processing_date,warehouse_entry:{farmers:{name:r.farmer_name,phone:r.farmer_phone,location:r.farmer_location}}}},sizes:r.sizes||[]};return console.log("📦 Batch details processed:",c),c}catch(t){return console.error("❌ Error in getBatchDetails:",t),null}})}getSizeDemandStatistics(){return s(this,null,function*(){try{console.log("🔍 Getting size demand statistics from outlet orders...");const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("outlet_orders").select(`
            id,
            requested_sizes,
            requested_quantity,
            requested_grade,
            order_date,
            status,
            outlet:outlets(
              id,
              name,
              location
            )
          `).not("requested_sizes","is",null).order("order_date",{ascending:!1})}));if(t)return console.warn("⚠️ Error fetching outlet orders data:",t),[];console.log("📦 Raw outlet orders data:",e);const n=(e||[]).filter(i=>["confirmed","processing","dispatched","delivered"].includes(i.status)&&i.requested_quantity>0);console.log("📦 Valid outlet orders:",n);const r=new Map;n.forEach(i=>{i.requested_sizes&&Array.isArray(i.requested_sizes)&&i.requested_sizes.forEach(o=>{var _;r.has(o)||r.set(o,{size_class:o,total_orders:0,total_weight_kg_requested:0,outlet_count:new Set,first_order_date:null,last_order_date:null,grade_preferences:new Map});const l=r.get(o);if(l.total_orders+=1,l.total_weight_kg_requested+=i.requested_quantity||0,l.outlet_count.add((_=i.outlet)==null?void 0:_.id),i.requested_grade){const g=l.grade_preferences.get(i.requested_grade)||0;l.grade_preferences.set(i.requested_grade,g+1)}const a=new Date(i.order_date);(!l.first_order_date||a<new Date(l.first_order_date))&&(l.first_order_date=i.order_date),(!l.last_order_date||a>new Date(l.last_order_date))&&(l.last_order_date=i.order_date)})});const c=Array.from(r.values()).map(i=>{var o;return{size_class:i.size_class,total_orders:i.total_orders,total_weight_kg_requested:i.total_weight_kg_requested,unique_outlets:i.outlet_count.size,first_order_date:i.first_order_date,last_order_date:i.last_order_date,days_span:i.first_order_date&&i.last_order_date?Math.ceil((new Date(i.last_order_date).getTime()-new Date(i.first_order_date).getTime())/(1e3*60*60*24)):0,most_requested_grade:((o=Array.from(i.grade_preferences.entries()).sort((_,l)=>l[1]-_[1])[0])==null?void 0:o[0])||"any"}}).filter(i=>i.total_weight_kg_requested>0).sort((i,o)=>o.total_weight_kg_requested-i.total_weight_kg_requested);return console.log("📊 Size demand statistics from outlet orders:",c),c}catch(e){return console.error("❌ Error in getSizeDemandStatistics:",e),[]}})}getInventoryWithStorageMap(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).order("created_at",{ascending:!1})}));if(n)throw n;const r=(t||[]).filter(o=>o.sorting_batch&&o.sorting_batch.status==="completed");console.log("📦 Filtered sorting results (completed only):",r.length,"out of",(t==null?void 0:t.length)||0);const c={};r.forEach(o=>{var _,l,a,g,f,q,S,y,w,I,k,F,O,p;const m=o.storage_location_id||"unknown",z=e.get(m)||"Unknown Storage",v=o.size_class,E=o.total_pieces||0,P=(o.total_weight_grams||0)/1e3;if(E>0){c[m]||(c[m]={storage_location_id:m,storage_location_name:z,sizes:{}}),c[m].sizes[v]||(c[m].sizes[v]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),c[m].sizes[v].total_quantity+=E,c[m].sizes[v].total_weight_kg+=P,c[m].sizes[v].batch_count+=1;const U=!!o.transfer_id&&o.transfer_source_storage_name;c[m].sizes[v].contributing_batches.push(T({batch_id:o.sorting_batch_id,batch_number:((_=o.sorting_batch)==null?void 0:_.batch_number)||`BATCH-${(l=o.sorting_batch_id)==null?void 0:l.slice(-8).toUpperCase()}`,quantity:E,weight_kg:P,storage_location_name:z,farmer_name:U?`${((q=(f=(g=(a=o.sorting_batch)==null?void 0:a.processing_record)==null?void 0:g.warehouse_entry)==null?void 0:f.farmers)==null?void 0:q.name)||"Unknown"} (Transferred from ${o.transfer_source_storage_name})`:((I=(w=(y=(S=o.sorting_batch)==null?void 0:S.processing_record)==null?void 0:y.warehouse_entry)==null?void 0:w.farmers)==null?void 0:I.name)||"Unknown",processing_date:((F=(k=o.sorting_batch)==null?void 0:k.processing_record)==null?void 0:F.processing_date)||"Unknown",added_date:((O=o.sorting_batch)==null?void 0:O.created_at)||new Date().toISOString(),created_at:((p=o.sorting_batch)==null?void 0:p.created_at)||new Date().toISOString()},U&&{is_transfer:!0,transfer_id:o.transfer_id,transfer_source_storage_id:o.transfer_source_storage_id,transfer_source_storage_name:o.transfer_source_storage_name}))}});const i=[];return Object.values(c).forEach(o=>{Object.entries(o.sizes).forEach(([_,l])=>{i.push({storage_location_id:o.storage_location_id,storage_location_name:o.storage_location_name,size:parseInt(_),total_quantity:l.total_quantity,total_weight_kg:l.total_weight_kg,batch_count:l.batch_count,contributing_batches:l.contributing_batches})})}),console.log("📦 Final inventory result:",i),console.log("📊 Storage aggregation:",c),i.sort((o,_)=>o.storage_location_name!==_.storage_location_name?o.storage_location_name.localeCompare(_.storage_location_name):o.size-_.size)}catch(t){throw new Error(h(t,"fetching inventory with storage map"))}})}getInventoryFromSortingBatchesFallback(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.from("sorting_batches").select(`
            id,
            batch_number,
            size_distribution,
            created_at,
            storage_location_id,
            processing_record:processing_records(
              id,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").not("size_distribution","is",null).order("created_at",{ascending:!1})}));if(n)throw n;const r={};return t==null||t.forEach(c=>{c.size_distribution&&typeof c.size_distribution=="object"&&Object.entries(c.size_distribution).forEach(([i,o])=>{var _,l,a,g,f,q,S;const y=parseInt(i),w=parseInt(o)||0;if(!isNaN(y)&&w>0){const I=this.getEstimatedWeightPerFish(y),k=w*I;r[y]||(r[y]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[],storage_locations:{}}),r[y].total_quantity+=w,r[y].total_weight_kg+=k,r[y].batch_count+=1,r[y].contributing_batches.push({batch_id:c.id,batch_number:c.batch_number||`BATCH-${(_=c.id)==null?void 0:_.slice(-8).toUpperCase()}`,quantity:w,weight_kg:k,storage_location_id:c.storage_location_id,storage_location_name:e.get(c.storage_location_id)||"Unknown Storage",farmer_name:((g=(a=(l=c.processing_record)==null?void 0:l.warehouse_entry)==null?void 0:a.farmers)==null?void 0:g.name)||"Unknown",processing_date:((f=c.processing_record)==null?void 0:f.processing_date)||"Unknown",added_date:c.created_at,created_at:c.created_at}),c.storage_location_id&&(r[y].storage_locations[c.storage_location_id]={storage_location_name:e.get(c.storage_location_id)||"Unknown Storage",quantity:(((q=r[y].storage_locations[c.storage_location_id])==null?void 0:q.quantity)||0)+w,weight_kg:(((S=r[y].storage_locations[c.storage_location_id])==null?void 0:S.weight_kg)||0)+k})}})}),Object.entries(r).map(([c,i])=>({size:parseInt(c),quantity:i.total_quantity,total_weight_kg:i.total_weight_kg,batch_count:i.batch_count,storage_locations:i.storage_locations,contributing_batches:i.contributing_batches})).sort((c,i)=>c.size-i.size)}catch(t){throw new Error(h(t,"fetching inventory from sorting batches fallback"))}})}getBatchesForSize(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_batches_for_size",{p_size:e})}));if(n)throw n;return t||[]}catch(t){throw new Error(h(t,"fetching batches for size"))}})}getStorageCapacityStatus(){return s(this,null,function*(){try{const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_storage_capacity_status")}));if(t)throw t;return e||[]}catch(e){throw new Error(h(e,"fetching storage capacity status"))}})}getAvailableStorageLocationsForSorting(e=0){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_available_storage_locations_for_sorting",{p_required_weight_kg:e})}));if(n)throw n;return t||[]}catch(t){throw new Error(h(t,"fetching available storage locations"))}})}validateStorageLocationForSorting(e,t=0){return s(this,null,function*(){try{const{data:n,error:r}=yield u(()=>s(this,null,function*(){return yield d.rpc("validate_storage_location_for_sorting",{p_storage_location_id:e,p_estimated_weight_kg:t})}));if(r)throw r;return(n==null?void 0:n[0])||{is_valid:!1,message:"Validation failed",storage_location_name:"",available_capacity_kg:0,utilization_percent:0}}catch(n){throw new Error(h(n,"validating storage location"))}})}getInventoryItems(){return s(this,null,function*(){try{const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("inventory").select("*").order("size",{ascending:!0})}));if(t)throw t;return e||[]}catch(e){throw new Error(h(e,"fetching inventory items"))}})}getInventoryEntries(e=100){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.from("inventory_entries").select("*").order("created_at",{ascending:!1}).limit(e)}));if(n)throw n;return t||[]}catch(t){throw new Error(h(t,"fetching inventory entries"))}})}addStockFromSorting(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.rpc("add_stock_from_sorting",{p_sorting_batch_id:e})}));if(n)throw n;return t||[]}catch(t){throw new Error(h(t,"adding stock from sorting batch"))}})}getSortingBatchesForInventory(){return s(this,null,function*(){try{const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("sorting_batches").select(`
            *,
            processing_record:processing_records(
              id,
              post_processing_weight,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                entry_date,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").order("created_at",{ascending:!1})}));if(t)throw t;return yield Promise.all((e||[]).map(n=>s(this,null,function*(){const{data:r,error:c}=yield u(()=>s(this,null,function*(){return yield d.from("sorting_results").select("*").eq("sorting_batch_id",n.id).order("size_class")}));return c?(console.warn(`Error fetching results for batch ${n.id}:`,c),B(T({},n),{results:[]})):B(T({},n),{results:r||[]})})))}catch(e){throw new Error(h(e,"fetching sorting batches for inventory"))}})}validateSortingBatchForInventory(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.rpc("validate_sorting_batch_for_inventory",{p_sorting_batch_id:e})}));if(n)throw n;return t||{canAdd:!1,reason:"Unknown error"}}catch(t){throw new Error(h(t,"validating sorting batch for inventory"))}})}getInventoryBySize(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.from("inventory").select("*").eq("size",e).single()}));if(n&&n.code!=="PGRST116")throw n;return t||null}catch(t){throw new Error(h(t,`fetching inventory for size ${e}`))}})}getInventoryStats(){return s(this,null,function*(){try{const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.rpc("get_inventory_statistics")}));if(t)throw t;return e||{total_quantity:0,total_weight:0,size_distribution:{},last_updated:new Date().toISOString()}}catch(e){throw new Error(h(e,"fetching inventory statistics"))}})}createInventoryAdjustment(e,t,n){return s(this,null,function*(){try{const{data:r,error:c}=yield u(()=>s(this,null,function*(){return yield d.from("inventory_entries").insert({size:e,quantity_change:t,entry_type:"adjustment",notes:n}).select().single()}));if(c)throw c;return r}catch(r){throw new Error(h(r,"creating inventory adjustment"))}})}updateInventory(e,t){return s(this,null,function*(){try{const{data:n,error:r}=yield u(()=>s(this,null,function*(){return yield d.from("inventory").update({quantity:t,updated_at:new Date().toISOString()}).eq("id",e).select().single()}));if(r)throw r;return n}catch(n){throw new Error(h(n,"updating inventory item"))}})}processFIFOOrderFulfillment(e,t,n,r){return s(this,null,function*(){var c;try{const{data:i,error:o}=yield u(()=>s(this,null,function*(){return yield d.rpc("process_fifo_order_fulfillment",{p_order_id:e,p_size:t,p_required_quantity:n,p_required_weight_kg:r})}));if(o){if(o.code==="PGRST202"||(c=o.message)!=null&&c.includes("Could not find the function"))return console.warn("⚠️ FIFO order fulfillment function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",allocatedBatches:[],remainingQuantity:n,remainingWeightKg:r};throw o}return(i==null?void 0:i[0])||{success:!1,message:"Unknown error",allocatedBatches:[],remainingQuantity:0,remainingWeightKg:0}}catch(i){throw new Error(h(i,"processing FIFO order fulfillment"))}})}reduceInventoryOnOrderApproval(e,t,n,r){return s(this,null,function*(){var c;try{const{data:i,error:o}=yield u(()=>s(this,null,function*(){return yield d.rpc("reduce_inventory_on_order_approval",{p_order_id:e,p_size:t,p_quantity:n,p_weight_kg:r})}));if(o){if(o.code==="PGRST202"||(c=o.message)!=null&&c.includes("Could not find the function"))return console.warn("⚠️ FIFO inventory reduction function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",reducedBatches:[]};throw o}return(i==null?void 0:i[0])||{success:!1,message:"Unknown error",reducedBatches:[]}}catch(i){throw new Error(h(i,"reducing inventory on order approval"))}})}transferInventoryBetweenStorage(e,t,n,r,c){return s(this,null,function*(){var i;try{const{data:o,error:_}=yield u(()=>s(this,null,function*(){return yield d.rpc("transfer_inventory_between_storage",{p_from_storage_location_id:e,p_to_storage_location_id:t,p_size:n,p_quantity:r,p_notes:c||null})}));if(_){if(_.code==="PGRST202"||(i=_.message)!=null&&i.includes("Could not find the function"))return console.warn("⚠️ Transfer function not found. Please run the database script: db/fix_inventory_storage_integration.sql"),{success:!1,message:"Transfer function not available. Please run the database setup script.",from_remaining:0,to_new_total:0};throw _}return(o==null?void 0:o[0])||{success:!1,message:"Unknown error",from_remaining:0,to_new_total:0}}catch(o){throw new Error(h(o,"transferring inventory between storage locations"))}})}createTransfer(e,t,n,r,c,i){return s(this,null,function*(){try{const{data:o,error:_}=yield u(()=>s(this,null,function*(){return yield d.rpc("create_transfer",{p_from_storage_location_id:e,p_to_storage_location_id:t,p_size:n,p_quantity:r,p_weight_kg:c,p_notes:i||null})}));if(_)throw _;return{success:!0,transferId:o,message:"Transfer created successfully"}}catch(o){throw new Error(h(o,"creating transfer"))}})}createTransferRequest(e,t,n,r,c,i){return s(this,null,function*(){const o=yield this.createTransfer(e,t,n,r,c,i);return{success:o.success,requestId:o.transferId,message:o.message}})}createBatchTransfer(e,t,n,r,c){return s(this,null,function*(){try{const{data:i,error:o}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("id, size_class, quantity, weight_kg, notes").eq("from_storage_location_id",e).eq("to_storage_location_id",t).eq("status","pending")}));if(o)console.warn("Could not check for existing transfers:",o);else if(i&&i.length>0&&n.some(g=>i.some(f=>f.size_class===g.size&&f.quantity===g.quantity&&Math.abs(f.weight_kg-g.weightKg)<.01)))throw new Error("A transfer request for these items already exists. Please check the transfer approvals section.");const _=n.map(g=>({size:Number(g.size),quantity:g.quantity?Number(g.quantity):1,weightKg:Number(g.weightKg)}));console.log("🔍 [InventoryService] Creating batch transfer with data:",{fromStorageLocationId:e,toStorageLocationId:t,sizeData:_,notes:r});const{data:l,error:a}=yield u(()=>s(this,null,function*(){return yield d.rpc("create_batch_transfer",{p_from_storage_location_id:e,p_to_storage_location_id:t,p_size_data:_,p_notes:r||null,p_requested_by:c||null})}));if(console.log("📊 [InventoryService] Batch transfer creation result:",{data:l,error:a}),a)throw a.code==="23505"?new Error("A transfer request for these items already exists. Please check the transfer approvals section."):a.message&&a.message.includes("function create_batch_transfer")?new Error("Transfer system not properly set up. Please run the database migration script: QUICK_TRANSFER_FIX.sql"):a;return{success:!0,transferId:l,message:`Batch transfer created successfully for ${n.length} sizes`}}catch(i){throw new Error(h(i,"creating batch transfer"))}})}approveTransfer(e,t){return s(this,null,function*(){try{const{data:n,error:r}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",e).single()}));if(r)throw r;const{data:c,error:i}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",n.from_storage_location_id).eq("to_storage_location_id",n.to_storage_location_id).eq("created_at",n.created_at).eq("notes",n.notes).eq("status","pending")}));if(i)throw i;const o=((c==null?void 0:c.length)||0)>1,_=o?"approve_batch_transfer":"approve_transfer";console.log(`🔍 [InventoryService] ${o?"Batch":"Single"} transfer approval for ID: ${e}`);const{data:l,error:a}=yield u(()=>s(this,null,function*(){return yield d.rpc(_,{p_transfer_id:e,p_approved_by:t})}));if(a)throw a;return(l==null?void 0:l[0])||{success:!1,message:"Unknown error"}}catch(n){throw new Error(h(n,"approving transfer"))}})}approveTransferRequest(e,t){return s(this,null,function*(){return yield this.approveTransfer(e,t)})}declineTransfer(e,t){return s(this,null,function*(){try{const{data:n,error:r}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",e).single()}));if(r)throw r;const{data:c,error:i}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",n.from_storage_location_id).eq("to_storage_location_id",n.to_storage_location_id).eq("created_at",n.created_at).eq("notes",n.notes).eq("status","pending")}));if(i)throw i;const o=((c==null?void 0:c.length)||0)>1,_=o?"decline_batch_transfer":"decline_transfer";console.log(`🔍 [InventoryService] ${o?"Batch":"Single"} transfer decline for ID: ${e}`);const{data:l,error:a}=yield u(()=>s(this,null,function*(){return yield d.rpc(_,{p_transfer_id:e,p_approved_by:t})}));if(a)throw a;return(l==null?void 0:l[0])||{success:!1,message:"Unknown error"}}catch(n){throw new Error(h(n,"declining transfer"))}})}completeTransfer(e,t){return s(this,null,function*(){try{console.log(`🔍 [InventoryService] Marking transfer as completed for ID: ${e}`);const{data:n,error:r}=yield u(()=>s(this,null,function*(){return yield d.rpc("complete_transfer",{p_transfer_id:e,p_completed_by:t})}));if(r)throw r;return(n==null?void 0:n[0])||{success:!1,message:"Unknown error"}}catch(n){throw new Error(h(n,"completing transfer"))}})}declineTransferRequest(e,t){return s(this,null,function*(){return yield this.declineTransfer(e,t)})}getPendingTransfers(){return s(this,null,function*(){try{console.log("🔍 [InventoryService] Fetching pending transfers...");const{data:e,error:t}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("*").eq("status","pending").order("created_at",{ascending:!1})}));return console.log("📊 [InventoryService] Pending transfers result:",{data:e,error:t,count:(e==null?void 0:e.length)||0}),t?(console.warn("⚠️ [InventoryService] Error fetching pending transfers:",t),[]):e||[]}catch(e){return console.error("❌ [InventoryService] Error in getPendingTransfers:",e),[]}})}getPendingTransferRequests(){return s(this,null,function*(){return yield this.getPendingTransfers()})}getAvailableStorageLocationsForTransfer(e){return s(this,null,function*(){try{const{data:t,error:n}=yield u(()=>s(this,null,function*(){let r=d.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").eq("status","active").order("name");return e&&(r=r.neq("id",e)),yield r}));if(n)throw n;return yield Promise.all((t||[]).map(r=>s(this,null,function*(){const{data:c,error:i}=yield u(()=>s(this,null,function*(){return yield d.from("sorting_results").select("total_weight_grams").eq("storage_location_id",r.id)}));if(i)return console.warn(`Error calculating usage for ${r.name}:`,i),B(T({},r),{current_usage_kg:r.current_usage_kg||0,available_capacity_kg:(r.capacity_kg||0)-(r.current_usage_kg||0),utilization_percent:r.capacity_kg>0?(r.current_usage_kg||0)/r.capacity_kg*100:0});const o=(c||[]).reduce((a,g)=>a+(g.total_weight_grams||0)/1e3,0),_=Math.max(0,(r.capacity_kg||0)-o),l=r.capacity_kg>0?o/r.capacity_kg*100:0;return console.log(`Storage ${r.name}: Capacity=${r.capacity_kg}kg, Usage=${o.toFixed(2)}kg, Available=${_.toFixed(2)}kg`),B(T({},r),{current_usage_kg:o,available_capacity_kg:_,utilization_percent:l})})))}catch(t){throw new Error(h(t,"fetching available storage locations for transfer"))}})}getTransfersWithItems(e=100){return s(this,null,function*(){return yield this.getTransferHistory(e)})}getTransferHistory(e=100){return s(this,null,function*(){try{console.log("🔍 [InventoryService] Fetching transfer history from transfers table...");const{data:t,error:n}=yield u(()=>s(this,null,function*(){return yield d.from("transfers").select("*").order("created_at",{ascending:!1}).limit(e)}));if(console.log("📊 [InventoryService] Transfers table result:",{data:t,error:n,count:(t==null?void 0:t.length)||0}),n)return console.error("❌ [InventoryService] Error accessing transfers table:",n),[];if(!t||t.length===0)return console.log("⚠️ [InventoryService] No transfer data found in transfers table"),[];const r=[...new Set([...t.map(l=>l.requested_by).filter(Boolean),...t.map(l=>l.approved_by).filter(Boolean)])],{data:c,error:i}=yield u(()=>s(this,null,function*(){return r.length===0?{data:[],error:null}:yield d.from("profiles").select("id, first_name, last_name, email").in("id",r)})),o=new Map;c&&!i&&c.forEach(l=>{o.set(l.id,`${l.first_name} ${l.last_name}`)});const _=t.map(l=>({id:l.id,from_storage:l.from_storage_name||"Unknown",to_storage:l.to_storage_name||"Unknown",size:l.size_class||0,quantity:l.quantity||0,weight_kg:l.weight_kg||0,notes:l.notes||"",status:l.status,created_at:l.created_at,created_by:l.requested_by?o.get(l.requested_by)||`User ${l.requested_by.slice(0,8)}`:"System",approved_by:l.approved_by?o.get(l.approved_by)||`User ${l.approved_by.slice(0,8)}`:null,is_bulk:!1,batch_size:1}));return _.sort((l,a)=>new Date(a.created_at).getTime()-new Date(l.created_at).getTime()),console.log("📊 [InventoryService] Processed transfer data with bulk grouping:",_),_}catch(t){return console.error("Error fetching transfer history:",t),[]}})}}const R=new N;export{R as W};
