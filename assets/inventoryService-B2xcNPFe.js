import{w as l,s as g,o as u}from"./main-DB4uCdj-.js";class p{async getInventoryByStorage(){try{return console.log("üîç Getting inventory by storage with capacity method (working approach)..."),await this.getInventoryByStorageWithCapacity()}catch(t){console.warn("‚ö†Ô∏è Error in capacity method, falling back to legacy method:",t);try{return await this.getInventoryByStorageFallback()}catch(e){return console.warn("‚ùå Error in fallback method:",e),[]}}}async getInventoryByStorageWithFIFO(){throw console.warn("‚ö†Ô∏è FIFO database function is not available, this method is disabled"),new Error("FIFO_FUNCTION_NOT_AVAILABLE")}async getInventoryByStorageWithCapacity(){try{console.log("üîç Getting all storage locations with capacity data...");const{data:t,error:e}=await l(async()=>await g.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").order("name"));if(e)throw e;console.log("üìä Storage locations from database:",t);const{data:a,error:r}=await l(async()=>await g.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).gt("total_weight_grams",0).order("created_at",{ascending:!1}));if(r)throw r;const n=(a||[]).filter(o=>o.sorting_batch&&o.sorting_batch.status==="completed");console.log("üì¶ Filtered sorting results (completed only):",n.length,"out of",a?.length||0);const s=new Map;console.log("üó∫Ô∏è Creating storage map from locations:",t),t?.forEach(o=>{console.log("üìç Adding storage location to map:",o.id,o.name),s.set(o.id,o)}),console.log("üó∫Ô∏è Storage map created with",s.size,"locations");const i={};t?.forEach(o=>{i[o.id]={storage_location_id:o.id,storage_location_name:o.name,storage_location_type:o.location_type,status:o.status||"active",capacity_kg:o.capacity_kg||0,current_usage_kg:0,available_capacity_kg:o.capacity_kg||0,utilization_percent:0,sizes:{}}}),console.log("üîÑ Processing sorting results:",n.length,"results"),n.forEach(o=>{const d=o.storage_location_id,f=s.get(d);if(console.log("üîç Processing result for storage:",d,"found storage:",!!f),!f){console.warn("‚ö†Ô∏è No storage found for ID:",d,"available storage IDs:",Array.from(s.keys()));return}if(!i[d]){console.warn("‚ö†Ô∏è No storage aggregation found for ID:",d);return}const h=o.size_class,y=o.total_pieces||0,w=(o.total_weight_grams||0)/1e3;y>0&&(i[d].sizes[h]||(i[d].sizes[h]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),i[d].sizes[h].total_quantity+=y,i[d].sizes[h].total_weight_kg+=w,i[d].sizes[h].batch_count+=1,i[d].sizes[h].contributing_batches.push({batch_id:o.sorting_batch_id,batch_number:o.sorting_batch?.batch_number||`BATCH-${o.sorting_batch_id?.slice(-8).toUpperCase()}`,quantity:y,weight_kg:w,storage_location_name:f.name,farmer_name:o.sorting_batch?.processing_record?.warehouse_entry?.farmers?.name||"Unknown",processing_date:o.sorting_batch?.processing_record?.processing_date||"Unknown",added_date:o.sorting_batch?.created_at||new Date().toISOString(),created_at:o.sorting_batch?.created_at||new Date().toISOString(),is_transfer:!!o.transfer_id,transfer_id:o.transfer_id,transfer_source_storage_id:o.transfer_source_storage_id,transfer_source_storage_name:o.transfer_source_storage_name}))}),Object.values(i).forEach(o=>{let d=0;Object.values(o.sizes).forEach(f=>{d+=f.total_weight_kg}),o.current_usage_kg=d,o.available_capacity_kg=Math.max(0,o.capacity_kg-d),o.utilization_percent=o.capacity_kg>0?Math.round(d/o.capacity_kg*100*100)/100:0});const c=[];Object.values(i).forEach(o=>{Object.keys(o.sizes).length===0?c.push({storage_location_id:o.storage_location_id,storage_location_name:o.storage_location_name,storage_location_type:o.storage_location_type,storage_status:o.status||"active",capacity_kg:o.capacity_kg,current_usage_kg:o.current_usage_kg,available_capacity_kg:o.available_capacity_kg,utilization_percent:o.utilization_percent,size:null,total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}):Object.entries(o.sizes).forEach(([d,f])=>{c.push({storage_location_id:o.storage_location_id,storage_location_name:o.storage_location_name,storage_location_type:o.storage_location_type,storage_status:o.status||"active",capacity_kg:o.capacity_kg,current_usage_kg:o.current_usage_kg,available_capacity_kg:o.available_capacity_kg,utilization_percent:o.utilization_percent,size:parseInt(d),total_quantity:f.total_quantity,total_weight_kg:f.total_weight_kg,batch_count:f.batch_count,contributing_batches:f.contributing_batches})})}),console.log("üì¶ Final inventory result with capacity:",c),console.log("üìä Storage aggregation with capacity:",i);const _=c.filter(o=>o.size===9);return console.log("üîç Size 9 in final inventory result:",_),console.log("üîç Size 9 by storage:",_.map(o=>({storage:o.storage_location_name,weight:o.total_weight_kg,hasBatches:o.contributing_batches&&o.contributing_batches.length>0}))),c.sort((o,d)=>o.storage_location_name!==d.storage_location_name?o.storage_location_name.localeCompare(d.storage_location_name):o.size===null&&d.size!==null?-1:o.size!==null&&d.size===null?1:o.size===null&&d.size===null?0:o.size-d.size)}catch(t){throw new Error(u(t,"fetching inventory with capacity tracking"))}}async getInventoryByStorageFallback(){try{console.log("üîç Getting storage locations directly from storage_locations table...");const{data:t,error:e}=await l(async()=>await g.from("storage_locations").select("id, name, status").order("name"));if(console.log("üìä Storage locations from table:",t),console.log("‚ùå Storage error:",e),e){console.warn("Could not fetch storage locations table:",e),console.log("üîÑ Using known storage locations...");const r=new Map;return r.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),r.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),r.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),r.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),r.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),r.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(r)}const a=new Map;return t?.forEach(r=>{a.set(r.id,r.name)}),console.log("‚úÖ Using storage locations from table:",a),this.getInventoryWithStorageMap(a)}catch(t){console.error("Error in getInventoryByStorageFallback:",t);const e=new Map;return e.set("5cc7c667-8959-4dde-abe8-bd41d2b26d4e","Cold Storage A"),e.set("f0f53658-830a-45c2-8dd3-4d0639e408d0","Cold Storage B"),e.set("cfb34d85-6120-42fa-9af9-945d7d235ebc","Test Storage"),e.set("0714e394-2396-438b-bcbe-9701633ff5ac","Freezer Unit 1"),e.set("2bc2ab3f-a2fb-4822-aae5-05c92cc4e913","Processing Area 1"),e.set("92ef2abd-d1c5-4941-80ef-d4478cfb00a7","Processing Area 2"),this.getInventoryWithStorageMap(e)}}async getInventorySummary(){try{const{data:t,error:e}=await l(async()=>await g.from("inventory").select("*").order("size",{ascending:!0}));if(e)throw e;return(t||[]).map(a=>({size:a.size,quantity:a.quantity,total_weight_kg:this.getEstimatedWeightPerFish(a.size)*a.quantity}))}catch(t){throw new Error(u(t,"fetching inventory summary"))}}getEstimatedWeightPerFish(t){return{0:.2,1:.3,2:.4,3:.5,4:.6,5:.7,6:.8,7:.9,8:1,9:1.1,10:1.2}[t]||.5}async getOldestBatchForRemoval(){try{console.log("üîç Getting oldest batches available for ordering (FIFO)...");const{data:t,error:e}=await l(async()=>await g.rpc("get_batches_available_for_order"));if(e)return console.warn("‚ö†Ô∏è Error fetching batches available for order:",e),await this.getOldestBatchFallback();if(!t||t.length===0)return console.log("üì¶ No batches available for ordering"),[];const a=t.map(r=>({batch_id:r.batch_id,batch_number:r.batch_number,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_kg,storage_location_name:r.storage_location_name,created_at:r.created_at,processing_date:r.processing_date,farmer_name:r.farmer_name,days_in_storage:r.days_in_storage,batch_status:"completed",available_for_order:!0,priority_score:r.priority_score}));return console.log("üì¶ FIFO batches available for ordering:",a.length),a.length>0&&console.log("üì¶ First available batch:",a[0]),a.slice(0,10)}catch(t){return console.error("‚ùå Error in getOldestBatchForRemoval:",t),[]}}async getOldestBatchFallback(){try{console.log("üîç Using fixed fallback method for oldest batches...");const{data:t,error:e}=await l(async()=>await g.rpc("get_oldest_batches_fixed"));if(e)return console.warn("‚ö†Ô∏è Error in fixed fallback query:",e),[];if(!t||t.length===0)return console.log("üì¶ No results from fixed fallback query"),[];const a=t.map(r=>({batch_id:r.batch_id,batch_number:r.batch_number,size_class:r.size_class,total_pieces:r.total_pieces,total_weight_kg:r.total_weight_kg,storage_location_name:r.storage_location_name,created_at:r.created_at,processing_date:r.processing_date,farmer_name:r.farmer_name,days_in_storage:r.days_in_storage,batch_status:"completed"}));return console.log("üì¶ Fixed fallback method found:",a.length,"batches"),a.slice(0,10)}catch(t){return console.error("‚ùå Error in fixed fallback method:",t),[]}}async getBatchDetails(t){try{console.log("üîç Getting batch details for:",t);const{data:e,error:a}=await l(async()=>await g.rpc("get_batch_details_fixed",{p_batch_id:t}));if(a)return console.warn("‚ö†Ô∏è Error fetching batch details:",a),null;if(!e||e.length===0)return console.warn("‚ö†Ô∏è No batch details found for:",t),null;const r=e[0],n={batch:{id:r.batch_id,batch_number:r.batch_number,status:r.status,created_at:r.created_at,processing_record:{processing_date:r.processing_date,warehouse_entry:{farmers:{name:r.farmer_name,phone:r.farmer_phone,location:r.farmer_location}}}},sizes:r.sizes||[]};return console.log("üì¶ Batch details processed:",n),n}catch(e){return console.error("‚ùå Error in getBatchDetails:",e),null}}async getSizeDemandStatistics(){try{console.log("üîç Getting size demand statistics from outlet orders...");const{data:t,error:e}=await l(async()=>await g.from("outlet_orders").select(`
            id,
            requested_sizes,
            requested_quantity,
            requested_grade,
            order_date,
            status,
            outlet:outlets(
              id,
              name,
              location
            )
          `).not("requested_sizes","is",null).order("order_date",{ascending:!1}));if(e)return console.warn("‚ö†Ô∏è Error fetching outlet orders data:",e),[];console.log("üì¶ Raw outlet orders data:",t);const a=(t||[]).filter(s=>["confirmed","processing","dispatched","delivered"].includes(s.status)&&s.requested_quantity>0);console.log("üì¶ Valid outlet orders:",a);const r=new Map;a.forEach(s=>{s.requested_sizes&&Array.isArray(s.requested_sizes)&&s.requested_sizes.forEach(i=>{r.has(i)||r.set(i,{size_class:i,total_orders:0,total_weight_kg_requested:0,outlet_count:new Set,first_order_date:null,last_order_date:null,grade_preferences:new Map});const c=r.get(i);if(c.total_orders+=1,c.total_weight_kg_requested+=s.requested_quantity||0,c.outlet_count.add(s.outlet?.id),s.requested_grade){const o=c.grade_preferences.get(s.requested_grade)||0;c.grade_preferences.set(s.requested_grade,o+1)}const _=new Date(s.order_date);(!c.first_order_date||_<new Date(c.first_order_date))&&(c.first_order_date=s.order_date),(!c.last_order_date||_>new Date(c.last_order_date))&&(c.last_order_date=s.order_date)})});const n=Array.from(r.values()).map(s=>({size_class:s.size_class,total_orders:s.total_orders,total_weight_kg_requested:s.total_weight_kg_requested,unique_outlets:s.outlet_count.size,first_order_date:s.first_order_date,last_order_date:s.last_order_date,days_span:s.first_order_date&&s.last_order_date?Math.ceil((new Date(s.last_order_date).getTime()-new Date(s.first_order_date).getTime())/(1e3*60*60*24)):0,most_requested_grade:Array.from(s.grade_preferences.entries()).sort((i,c)=>c[1]-i[1])[0]?.[0]||"any"})).filter(s=>s.total_weight_kg_requested>0).sort((s,i)=>i.total_weight_kg_requested-s.total_weight_kg_requested);return console.log("üìä Size demand statistics from outlet orders:",n),n}catch(t){return console.error("‚ùå Error in getSizeDemandStatistics:",t),[]}}async getInventoryWithStorageMap(t){try{const{data:e,error:a}=await l(async()=>await g.from("sorting_results").select(`
            id,
            size_class,
            total_pieces,
            total_weight_grams,
            storage_location_id,
            sorting_batch_id,
            transfer_source_storage_id,
            transfer_source_storage_name,
            transfer_id,
            sorting_batch:sorting_batches(
              id,
              batch_number,
              status,
              created_at,
              processing_record:processing_records(
                id,
                processing_date,
                warehouse_entry:warehouse_entries(
                  id,
                  entry_date,
                  farmer_id,
                  farmers(name, phone, location)
                )
              )
            )
          `).not("storage_location_id","is",null).order("created_at",{ascending:!1}));if(a)throw a;const r=(e||[]).filter(i=>i.sorting_batch&&i.sorting_batch.status==="completed");console.log("üì¶ Filtered sorting results (completed only):",r.length,"out of",e?.length||0);const n={};r.forEach(i=>{const c=i.storage_location_id||"unknown",_=t.get(c)||"Unknown Storage",o=i.size_class,d=i.total_pieces||0,f=(i.total_weight_grams||0)/1e3;if(d>0){n[c]||(n[c]={storage_location_id:c,storage_location_name:_,sizes:{}}),n[c].sizes[o]||(n[c].sizes[o]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[]}),n[c].sizes[o].total_quantity+=d,n[c].sizes[o].total_weight_kg+=f,n[c].sizes[o].batch_count+=1;const h=!!i.transfer_id&&i.transfer_source_storage_name;n[c].sizes[o].contributing_batches.push({batch_id:i.sorting_batch_id,batch_number:i.sorting_batch?.batch_number||`BATCH-${i.sorting_batch_id?.slice(-8).toUpperCase()}`,quantity:d,weight_kg:f,storage_location_name:_,farmer_name:h?`${i.sorting_batch?.processing_record?.warehouse_entry?.farmers?.name||"Unknown"} (Transferred from ${i.transfer_source_storage_name})`:i.sorting_batch?.processing_record?.warehouse_entry?.farmers?.name||"Unknown",processing_date:i.sorting_batch?.processing_record?.processing_date||"Unknown",added_date:i.sorting_batch?.created_at||new Date().toISOString(),created_at:i.sorting_batch?.created_at||new Date().toISOString(),...h&&{is_transfer:!0,transfer_id:i.transfer_id,transfer_source_storage_id:i.transfer_source_storage_id,transfer_source_storage_name:i.transfer_source_storage_name}})}});const s=[];return Object.values(n).forEach(i=>{Object.entries(i.sizes).forEach(([c,_])=>{s.push({storage_location_id:i.storage_location_id,storage_location_name:i.storage_location_name,size:parseInt(c),total_quantity:_.total_quantity,total_weight_kg:_.total_weight_kg,batch_count:_.batch_count,contributing_batches:_.contributing_batches})})}),console.log("üì¶ Final inventory result:",s),console.log("üìä Storage aggregation:",n),s.sort((i,c)=>i.storage_location_name!==c.storage_location_name?i.storage_location_name.localeCompare(c.storage_location_name):i.size-c.size)}catch(e){throw new Error(u(e,"fetching inventory with storage map"))}}async getInventoryFromSortingBatchesFallback(t){try{const{data:e,error:a}=await l(async()=>await g.from("sorting_batches").select(`
            id,
            batch_number,
            size_distribution,
            created_at,
            storage_location_id,
            processing_record:processing_records(
              id,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").not("size_distribution","is",null).order("created_at",{ascending:!1}));if(a)throw a;const r={};return e?.forEach(n=>{n.size_distribution&&typeof n.size_distribution=="object"&&Object.entries(n.size_distribution).forEach(([s,i])=>{const c=parseInt(s),_=parseInt(i)||0;if(!isNaN(c)&&_>0){const o=this.getEstimatedWeightPerFish(c),d=_*o;r[c]||(r[c]={total_quantity:0,total_weight_kg:0,batch_count:0,contributing_batches:[],storage_locations:{}}),r[c].total_quantity+=_,r[c].total_weight_kg+=d,r[c].batch_count+=1,r[c].contributing_batches.push({batch_id:n.id,batch_number:n.batch_number||`BATCH-${n.id?.slice(-8).toUpperCase()}`,quantity:_,weight_kg:d,storage_location_id:n.storage_location_id,storage_location_name:t.get(n.storage_location_id)||"Unknown Storage",farmer_name:n.processing_record?.warehouse_entry?.farmers?.name||"Unknown",processing_date:n.processing_record?.processing_date||"Unknown",added_date:n.created_at,created_at:n.created_at}),n.storage_location_id&&(r[c].storage_locations[n.storage_location_id]={storage_location_name:t.get(n.storage_location_id)||"Unknown Storage",quantity:(r[c].storage_locations[n.storage_location_id]?.quantity||0)+_,weight_kg:(r[c].storage_locations[n.storage_location_id]?.weight_kg||0)+d})}})}),Object.entries(r).map(([n,s])=>({size:parseInt(n),quantity:s.total_quantity,total_weight_kg:s.total_weight_kg,batch_count:s.batch_count,storage_locations:s.storage_locations,contributing_batches:s.contributing_batches})).sort((n,s)=>n.size-s.size)}catch(e){throw new Error(u(e,"fetching inventory from sorting batches fallback"))}}async getBatchesForSize(t){try{const{data:e,error:a}=await l(async()=>await g.rpc("get_batches_for_size",{p_size:t}));if(a)throw a;return e||[]}catch(e){throw new Error(u(e,"fetching batches for size"))}}async getStorageCapacityStatus(){try{const{data:t,error:e}=await l(async()=>await g.rpc("get_storage_capacity_status"));if(e)throw e;return t||[]}catch(t){throw new Error(u(t,"fetching storage capacity status"))}}async getAvailableStorageLocationsForSorting(t=0){try{const{data:e,error:a}=await l(async()=>await g.rpc("get_available_storage_locations_for_sorting",{p_required_weight_kg:t}));if(a)throw a;return e||[]}catch(e){throw new Error(u(e,"fetching available storage locations"))}}async validateStorageLocationForSorting(t,e=0){try{const{data:a,error:r}=await l(async()=>await g.rpc("validate_storage_location_for_sorting",{p_storage_location_id:t,p_estimated_weight_kg:e}));if(r)throw r;return a?.[0]||{is_valid:!1,message:"Validation failed",storage_location_name:"",available_capacity_kg:0,utilization_percent:0}}catch(a){throw new Error(u(a,"validating storage location"))}}async getInventoryItems(){try{const{data:t,error:e}=await l(async()=>await g.from("inventory").select("*").order("size",{ascending:!0}));if(e)throw e;return t||[]}catch(t){throw new Error(u(t,"fetching inventory items"))}}async getInventoryEntries(t=100){try{const{data:e,error:a}=await l(async()=>await g.from("inventory_entries").select("*").order("created_at",{ascending:!1}).limit(t));if(a)throw a;return e||[]}catch(e){throw new Error(u(e,"fetching inventory entries"))}}async addStockFromSorting(t){try{const{data:e,error:a}=await l(async()=>await g.rpc("add_stock_from_sorting",{p_sorting_batch_id:t}));if(a)throw a;return e||[]}catch(e){throw new Error(u(e,"adding stock from sorting batch"))}}async getSortingBatchesForInventory(){try{const{data:t,error:e}=await l(async()=>await g.from("sorting_batches").select(`
            *,
            processing_record:processing_records(
              id,
              post_processing_weight,
              processing_date,
              warehouse_entry:warehouse_entries(
                id,
                entry_date,
                farmer_id,
                farmers(name, phone, location)
              )
            )
          `).eq("status","completed").order("created_at",{ascending:!1}));if(e)throw e;return await Promise.all((t||[]).map(async r=>{const{data:n,error:s}=await l(async()=>await g.from("sorting_results").select("*").eq("sorting_batch_id",r.id).order("size_class"));return s?(console.warn(`Error fetching results for batch ${r.id}:`,s),{...r,results:[]}):{...r,results:n||[]}}))}catch(t){throw new Error(u(t,"fetching sorting batches for inventory"))}}async validateSortingBatchForInventory(t){try{const{data:e,error:a}=await l(async()=>await g.rpc("validate_sorting_batch_for_inventory",{p_sorting_batch_id:t}));if(a)throw a;return e||{canAdd:!1,reason:"Unknown error"}}catch(e){throw new Error(u(e,"validating sorting batch for inventory"))}}async getInventoryBySize(t){try{const{data:e,error:a}=await l(async()=>await g.from("inventory").select("*").eq("size",t).single());if(a&&a.code!=="PGRST116")throw a;return e||null}catch(e){throw new Error(u(e,`fetching inventory for size ${t}`))}}async getInventoryStats(){try{const{data:t,error:e}=await l(async()=>await g.rpc("get_inventory_statistics"));if(e)throw e;return t||{total_quantity:0,total_weight:0,size_distribution:{},last_updated:new Date().toISOString()}}catch(t){throw new Error(u(t,"fetching inventory statistics"))}}async createInventoryAdjustment(t,e,a){try{const{data:r,error:n}=await l(async()=>await g.from("inventory_entries").insert({size:t,quantity_change:e,entry_type:"adjustment",notes:a}).select().single());if(n)throw n;return r}catch(r){throw new Error(u(r,"creating inventory adjustment"))}}async updateInventory(t,e){try{const{data:a,error:r}=await l(async()=>await g.from("inventory").update({quantity:e,updated_at:new Date().toISOString()}).eq("id",t).select().single());if(r)throw r;return a}catch(a){throw new Error(u(a,"updating inventory item"))}}async processFIFOOrderFulfillment(t,e,a,r){try{const{data:n,error:s}=await l(async()=>await g.rpc("process_fifo_order_fulfillment",{p_order_id:t,p_size:e,p_required_quantity:a,p_required_weight_kg:r}));if(s){if(s.code==="PGRST202"||s.message?.includes("Could not find the function"))return console.warn("‚ö†Ô∏è FIFO order fulfillment function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",allocatedBatches:[],remainingQuantity:a,remainingWeightKg:r};throw s}return n?.[0]||{success:!1,message:"Unknown error",allocatedBatches:[],remainingQuantity:0,remainingWeightKg:0}}catch(n){throw new Error(u(n,"processing FIFO order fulfillment"))}}async reduceInventoryOnOrderApproval(t,e,a,r){try{const{data:n,error:s}=await l(async()=>await g.rpc("reduce_inventory_on_order_approval",{p_order_id:t,p_size:e,p_quantity:a,p_weight_kg:r}));if(s){if(s.code==="PGRST202"||s.message?.includes("Could not find the function"))return console.warn("‚ö†Ô∏è FIFO inventory reduction function not found. Please run the database script: db/ensure_inventory_storage_accuracy.sql"),{success:!1,message:"FIFO functions not available. Please run the database setup script.",reducedBatches:[]};throw s}return n?.[0]||{success:!1,message:"Unknown error",reducedBatches:[]}}catch(n){throw new Error(u(n,"reducing inventory on order approval"))}}async transferInventoryBetweenStorage(t,e,a,r,n){try{const{data:s,error:i}=await l(async()=>await g.rpc("transfer_inventory_between_storage",{p_from_storage_location_id:t,p_to_storage_location_id:e,p_size:a,p_quantity:r,p_notes:n||null}));if(i){if(i.code==="PGRST202"||i.message?.includes("Could not find the function"))return console.warn("‚ö†Ô∏è Transfer function not found. Please run the database script: db/fix_inventory_storage_integration.sql"),{success:!1,message:"Transfer function not available. Please run the database setup script.",from_remaining:0,to_new_total:0};throw i}return s?.[0]||{success:!1,message:"Unknown error",from_remaining:0,to_new_total:0}}catch(s){throw new Error(u(s,"transferring inventory between storage locations"))}}async createTransfer(t,e,a,r,n,s){try{const{data:i,error:c}=await l(async()=>await g.rpc("create_transfer",{p_from_storage_location_id:t,p_to_storage_location_id:e,p_size:a,p_quantity:r,p_weight_kg:n,p_notes:s||null}));if(c)throw c;return{success:!0,transferId:i,message:"Transfer created successfully"}}catch(i){throw new Error(u(i,"creating transfer"))}}async createTransferRequest(t,e,a,r,n,s){const i=await this.createTransfer(t,e,a,r,n,s);return{success:i.success,requestId:i.transferId,message:i.message}}async createBatchTransfer(t,e,a,r,n){try{const{data:s,error:i}=await l(async()=>await g.from("transfers").select("id, size_class, quantity, weight_kg, notes").eq("from_storage_location_id",t).eq("to_storage_location_id",e).eq("status","pending"));if(i)console.warn("Could not check for existing transfers:",i);else if(s&&s.length>0&&a.some(f=>s.some(h=>h.size_class===f.size&&h.quantity===f.quantity&&Math.abs(h.weight_kg-f.weightKg)<.01)))throw new Error("A transfer request for these items already exists. Please check the transfer approvals section.");const c=a.map(d=>({size:Number(d.size),quantity:d.quantity?Number(d.quantity):1,weightKg:Number(d.weightKg)}));console.log("üîç [InventoryService] Creating batch transfer with data:",{fromStorageLocationId:t,toStorageLocationId:e,sizeData:c,notes:r});const{data:_,error:o}=await l(async()=>await g.rpc("create_batch_transfer",{p_from_storage_location_id:t,p_to_storage_location_id:e,p_size_data:c,p_notes:r||null,p_requested_by:n||null}));if(console.log("üìä [InventoryService] Batch transfer creation result:",{data:_,error:o}),o)throw o.code==="23505"?new Error("A transfer request for these items already exists. Please check the transfer approvals section."):o.message&&o.message.includes("function create_batch_transfer")?new Error("Transfer system not properly set up. Please run the database migration script: QUICK_TRANSFER_FIX.sql"):o;return{success:!0,transferId:_,message:`Batch transfer created successfully for ${a.length} sizes`}}catch(s){throw new Error(u(s,"creating batch transfer"))}}async approveTransfer(t,e){try{const{data:a,error:r}=await l(async()=>await g.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",t).single());if(r)throw r;const{data:n,error:s}=await l(async()=>await g.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",a.from_storage_location_id).eq("to_storage_location_id",a.to_storage_location_id).eq("created_at",a.created_at).eq("notes",a.notes).eq("status","pending"));if(s)throw s;const i=(n?.length||0)>1,c=i?"approve_batch_transfer":"approve_transfer";console.log(`üîç [InventoryService] ${i?"Batch":"Single"} transfer approval for ID: ${t}`);const{data:_,error:o}=await l(async()=>await g.rpc(c,{p_transfer_id:t,p_approved_by:e}));if(o)throw o;return _?.[0]||{success:!1,message:"Unknown error"}}catch(a){throw new Error(u(a,"approving transfer"))}}async approveTransferRequest(t,e){return await this.approveTransfer(t,e)}async declineTransfer(t,e){try{const{data:a,error:r}=await l(async()=>await g.from("transfers").select("from_storage_location_id, to_storage_location_id, created_at, notes").eq("id",t).single());if(r)throw r;const{data:n,error:s}=await l(async()=>await g.from("transfers").select("id",{count:"exact"}).eq("from_storage_location_id",a.from_storage_location_id).eq("to_storage_location_id",a.to_storage_location_id).eq("created_at",a.created_at).eq("notes",a.notes).eq("status","pending"));if(s)throw s;const i=(n?.length||0)>1,c=i?"decline_batch_transfer":"decline_transfer";console.log(`üîç [InventoryService] ${i?"Batch":"Single"} transfer decline for ID: ${t}`);const{data:_,error:o}=await l(async()=>await g.rpc(c,{p_transfer_id:t,p_approved_by:e}));if(o)throw o;return _?.[0]||{success:!1,message:"Unknown error"}}catch(a){throw new Error(u(a,"declining transfer"))}}async completeTransfer(t,e){try{console.log(`üîç [InventoryService] Marking transfer as completed for ID: ${t}`);const{data:a,error:r}=await l(async()=>await g.rpc("complete_transfer",{p_transfer_id:t,p_completed_by:e}));if(r)throw r;return a?.[0]||{success:!1,message:"Unknown error"}}catch(a){throw new Error(u(a,"completing transfer"))}}async declineTransferRequest(t,e){return await this.declineTransfer(t,e)}async getPendingTransfers(){try{console.log("üîç [InventoryService] Fetching pending transfers...");const{data:t,error:e}=await l(async()=>await g.from("transfers").select("*").eq("status","pending").order("created_at",{ascending:!1}));return console.log("üìä [InventoryService] Pending transfers result:",{data:t,error:e,count:t?.length||0}),e?(console.warn("‚ö†Ô∏è [InventoryService] Error fetching pending transfers:",e),[]):t||[]}catch(t){return console.error("‚ùå [InventoryService] Error in getPendingTransfers:",t),[]}}async getPendingTransferRequests(){return await this.getPendingTransfers()}async getAvailableStorageLocationsForTransfer(t){try{const{data:e,error:a}=await l(async()=>{let n=g.from("storage_locations").select("id, name, location_type, capacity_kg, current_usage_kg, status").eq("status","active").order("name");return t&&(n=n.neq("id",t)),await n});if(a)throw a;return await Promise.all((e||[]).map(async n=>{const{data:s,error:i}=await l(async()=>await g.from("sorting_results").select("total_weight_grams").eq("storage_location_id",n.id));if(i)return console.warn(`Error calculating usage for ${n.name}:`,i),{...n,current_usage_kg:n.current_usage_kg||0,available_capacity_kg:(n.capacity_kg||0)-(n.current_usage_kg||0),utilization_percent:n.capacity_kg>0?(n.current_usage_kg||0)/n.capacity_kg*100:0};const c=(s||[]).reduce((d,f)=>d+(f.total_weight_grams||0)/1e3,0),_=Math.max(0,(n.capacity_kg||0)-c),o=n.capacity_kg>0?c/n.capacity_kg*100:0;return console.log(`Storage ${n.name}: Capacity=${n.capacity_kg}kg, Usage=${c.toFixed(2)}kg, Available=${_.toFixed(2)}kg`),{...n,current_usage_kg:c,available_capacity_kg:_,utilization_percent:o}}))}catch(e){throw new Error(u(e,"fetching available storage locations for transfer"))}}async getTransfersWithItems(t=100){return await this.getTransferHistory(t)}async getTransferHistory(t=100){try{console.log("üîç [InventoryService] Fetching transfer history from transfers table...");const{data:e,error:a}=await l(async()=>await g.from("transfers").select("*").order("created_at",{ascending:!1}).limit(t));if(console.log("üìä [InventoryService] Transfers table result:",{data:e,error:a,count:e?.length||0}),a)return console.error("‚ùå [InventoryService] Error accessing transfers table:",a),[];if(!e||e.length===0)return console.log("‚ö†Ô∏è [InventoryService] No transfer data found in transfers table"),[];const r=[...new Set([...e.map(_=>_.requested_by).filter(Boolean),...e.map(_=>_.approved_by).filter(Boolean)])],{data:n,error:s}=await l(async()=>r.length===0?{data:[],error:null}:await g.from("profiles").select("id, first_name, last_name, email").in("id",r)),i=new Map;n&&!s&&n.forEach(_=>{i.set(_.id,`${_.first_name} ${_.last_name}`)});const c=e.map(_=>({id:_.id,from_storage:_.from_storage_name||"Unknown",to_storage:_.to_storage_name||"Unknown",size:_.size_class||0,quantity:_.quantity||0,weight_kg:_.weight_kg||0,notes:_.notes||"",status:_.status,created_at:_.created_at,created_by:_.requested_by?i.get(_.requested_by)||`User ${_.requested_by.slice(0,8)}`:"System",approved_by:_.approved_by?i.get(_.approved_by)||`User ${_.approved_by.slice(0,8)}`:null,is_bulk:!1,batch_size:1}));return c.sort((_,o)=>new Date(o.created_at).getTime()-new Date(_.created_at).getTime()),console.log("üìä [InventoryService] Processed transfer data with bulk grouping:",c),c}catch(e){return console.error("Error fetching transfer history:",e),[]}}}const v=new p;export{v as i};
